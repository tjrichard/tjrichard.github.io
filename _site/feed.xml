<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seunghwan</title>
    <description>AB180의 UX 디자이너 장승환의 블로그입니다.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 16 Aug 2021 22:54:05 +0900</pubDate>
    <lastBuildDate>Mon, 16 Aug 2021 22:54:05 +0900</lastBuildDate>
    <generator>Jekyll v3.9.1</generator>

    
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
        <item>
          <title>Alley @Hackle, “데이터로 검증해야 올바른 의사결정이 가능해요”</title>
          <description>&lt;p class=&quot;text-gray&quot;&gt;🔗 이 글은 &lt;a href=&quot;https://abit.ly/b2b-designers_ask_alley_m&quot; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink1&apos; onclick=&apos;clickedOutlink(outlink1)&apos;&gt;&lt;img src=&apos;https://medium.com/favicon.ico&apos; style=&apos;display:inline; height: 1em; position: relative; bottom: -2px;&apos;&gt; B2B 디자이너들의 모임 Medium&lt;/a&gt;에도 게재되었습니다&lt;/p&gt;

### B2B 디자이너들의 모임 첫 &apos;멤버들에게 질문&apos; 세션으로 A/B 테스팅 솔루션을 제공 중인 스타트업 &apos;Hackle&apos;의 프로덕트 디자이너 Alley님과 함께합니다.

&lt;p class=&quot;text-gray&quot;&gt;
&lt;a href=&apos;https://www.hackle.io/service&apos; target=&apos;blank&apos; ref=&apos;nofollow&apos; id=&apos;outlink2&apos; onclick=&apos;clickedOutlink(outlink2)&apos;&gt;핵클(Hackle.io)이 어떤 서비스인지 궁금하시다면? &gt;&gt;&lt;/a&gt;
&lt;/p&gt;


## 🙋🏻‍♀️ 안녕하세요! 간단히 자기소개 부탁드립니다

**Alley:** 안녕하세요. 저는 현재 Hackle A/B Test에서 Product Designer로 근무하고 있는 Alley 입니다. 핵클에 입사한지 1년 차이며, 이전에 커머스 계열에서 근무한 경력이 있습니다.

다양한 디자이너, 개발자분들과 교류하는 것을 좋아해서 사이드 동아리도 자주 참여하는데 가장 대표적으로는 &apos;디프만&apos;이라는 동아리에서 &apos;가슴속 3천원&apos;이란 서비스를 제작한 경험이 있습니다. B2B 디자이너 단톡에서도 다양한 교류를 나누고 싶어서 첫 질문 세션에 참여하게 되었습니다!

![](https://miro.medium.com/max/1400/1*4teEAvTZj-6C-wI2GC5_Sw.png)

&lt;figcaption&gt;&lt;a href=&apos;https://medium.com/depromeet/%EA%B0%80%EC%8A%B4%EC%86%8D-3%EC%B2%9C%EC%9B%90-%EB%B6%95%EC%96%B4%EB%B9%B5%EC%97%90-%EB%88%84%EA%B5%AC%EB%B3%B4%EB%8B%A4-%EC%A7%84%EC%8B%AC%EC%9D%B4%EC%97%88%EB%8D%98-%EB%8C%80%ED%95%9C%EB%AF%BC%EA%B5%AD%EC%9D%B8%EC%9D%98-%EC%82%AC%EC%9D%B4%EB%93%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-2a3f714026b3&apos; target=&apos;blank&apos; ref=&apos;nofollow&apos; id=&apos;outlink3&apos; onclick=&apos;clickedOutlink(outlink3)&apos;&gt;Alley님이 제작한 ‘가슴속 3천원’ 앱이 궁금하시다면? &gt;&gt;&lt;/a&gt;&lt;/figcaption&gt;

**Alley:** 핵클은 현재 A/B 테스트 플랫폼을 주력으로 제공하고 있습니다. 저희 핵클은 다양한 고객분들이 안정적이고, 빠르게 데이터 기반의 성장을 할 수 있도록 돕는 것을 목표로 서비스를 확장해나가고 있습니다. 핵클의 A/B 테스트 플랫폼은 웹 대시보드 형태로 제공되어 사용자들이 쉽게 접근해 사용할 수 있습니다.

사용자들은  
&gt; 1. 테스트 프로젝트를 생성하고,
&gt; 2. 각기 다른 시안이나 기능을 제공할 그룹을 설정하고,
&gt; 3. 테스트를 통해 확인하려는 데이터를 설정한 후 (예: 구매 전환율, 평균 구매 금액 등)
&gt; 4. 전체 트래픽 중 어느 정도를 테스트 그룹에 할당할지를 결정하여 A/B 테스트를 만들 수 있습니다.

테스트를 진행하고자 하는 서비스에 연동해둔 SDK가 자동으로 진입한 사용자들을 판별해 테스트 그룹에 배정하고, 각 테스트 그룹에서 제공할 시안이나 기능을 자동으로 노출합니다. 이후 사용자의 행동 데이터를 수집해 설정한 목표 데이터로 계산합니다. 해당 데이터는 매시간 업데이트되어 테스트의 진행 현황을 빠르게 확인하실 수 있습니다.

![](https://miro.medium.com/max/1400/1*fQ19pbItqsY0NBtzHXN4Zw.png)

&lt;figcaption&gt;CTA에 사용할 후크 레이블에 대한 테스트 그룹 설정 예시&lt;br&gt;출처: 핵클 대시보드&lt;/figcaption&gt;

![](https://miro.medium.com/max/1400/1*gvb6sp5LW4CTvghCSrviLQ.png)

&lt;figcaption&gt;서비스를 사용하는 트래픽을 각 그룹에 할당하는 설정 예시&lt;br&gt;출처: 핵클 대시보드&lt;/figcaption&gt;

![](https://miro.medium.com/max/1400/1*fsa_BxdAiu9ku_eed29i3Q.png)

&lt;figcaption&gt;테스트 결과 리포트 예시&lt;br&gt;출처: 핵클 이용 가이드&lt;/figcaption&gt;

사용자들은 자신이 운영하는 서비스에 중요한 이벤트나 지표를 확인하거나, 테스트 과정에서 영향을 받을 수 있는 데이터를 모두 확인하여, 각 테스트 그룹이 결과 지표에 미치는 영향력을 확인할 수 있습니다.

예를 들어 커머스 서비스를 운영하는 경우 구매 전환율, 평균 구매 금액, 평균 구매 횟수와 같은 데이터들이 실험 결과에 따라 긍정적인 신호를 보일 것으로 가설을 세울 수 있습니다. 테스트의 목표를 이러한 데이터로 설정하고, 해당 목표를 달성하는데 더 유효한 그룹이 어떤 것인지 판별해낼 수 있습니다.

핵클은 사용자들에게 **&apos;검증 프로세스&apos;의 필요성**을 직접 확인시켜주는 역할을 해요. 대부분의 고객은 신규 기능이 더 좋은 결과를 가져올 것이라고 예상하지만, 사실 A/B 테스트는 사용자가 수립한 가설이 예상과 다름을 알려줍니다. 예를 들어, &apos;신규 기능 A를 제공하면 기존 사용자의 Retention 수치가 올라갈 것이다&apos;라는 가설을 세웠지만, 신규 기능을 출시한 후에도 기존 사용자의 Retention 수치가 유의미하게 증가하지 않는 것이죠. 이러한 과정을 통해 **아무리 작은 제품 개선이라도 데이터를 바탕으로 의사결정** 하는 과정이 꼭 필요하다는 것을 느끼고, **데이터 검증 과정을 업무 프로세스에 지속적으로 적용**해야 합니다.

핵클에서는 실제로 프로덕트 개선에 관한 결정을 위해 테스트를 수행하고, 결과 데이터를 바탕으로 의사결정 하는 문화를 가지고 있어요.

## 🧙🏻‍♀️ 핵클을 개선하기 위해 핵클을 사용한 경험에 대해서 알려주세요!

**Alley:** 핵클에서는 서비스 홈페이지, 테스트 대시보드 개선 작업에서 모두 핵클 A/B 테스트를 활용합니다. 신규 기능 출시, 불편 사항 개선과 같이 사용자에게 영향을 줄 수 있는 기능에 대해 테스트를 진행하고 그 결과 데이터를 바탕으로 의사결정을 하고 있어요. 그리고 테스트의 내용에 따라 알맞은 가설을 매번 설정하고, 봐야 할 핵심 지표도 테스트에 맞게 지정합니다.

## 👸🏻 핵클을 사용한 실제 고객사 사례를 소개해주실 수 있나요?

**Alley:** 핵클의 고객사 중 &apos;스파르타 코딩클럽&apos;에서 진행한 A/B 테스트 케이스를 소개해드릴 수 있을 것 같아요. 서비스 홈페이지에서 사용자 리뷰 영역 디자인을 변경하는 A/B 테스트를 진행하였어요. 그룹 A는 기존 디자인을 그대로 제공하는 대조군으로, 그룹 B는 가독성을 높인 개선된 디자인을 제공하는 실험군으로 설정하고, 목표 데이터는 구매 이벤트로 설정하였습니다. 테스트를 설계하신 분은 가독성이 더 높은 리뷰 디자인이 구매에 긍정적인 영향을 줄 것으로 가설을 세우고 기대를 한 것이죠.

![](https://miro.medium.com/max/1400/1*R0AKliqr97_moHtYgyHxIQ.png)

&lt;figcaption&gt;스파르타 코딩클럽 기존 시안 예시. 실제 테스트에 적용된 이미지와 다를 수 있습니다.&lt;br&gt;출처: 스파르타 코딩클럽&lt;/figcaption&gt;

![](https://miro.medium.com/max/1400/1*ywfDzszUdirHBZ0qvju2qg.png)

&lt;figcaption&gt;스파르타 코딩클럽 실험 시안 예시. 실제 테스트에 적용된 이미지와 다를 수 있습니다.&lt;br&gt;출처: 스파르타 코딩클럽&lt;/figcaption&gt;

하지만 설계자의 예상과 달리, 기존 시안이 제공된 그룹 A에 노출된 사용자보다, 새로운 시안이 제공된 그룹 B 사용자의 구매 전환율이 47%가 더 낮았습니다. 이처럼 개선했다고 생각한 디자인이 항상 예상대로 긍정적인 결과로 이어지지는 않는다는 사례가 될 수 있겠습니다.

## 📚 유저가 A/B 테스팅 전 설계나, 테스팅 후 분석하려면 사전지식이 필요할 것 같은데요, 유저에게 이런 정보들을 어떻게 전달하나요?

**Alley:** 프로덕트 디자이너 입장에서 좋은 프로덕트란 학습하지 않고도 사용하기 편한 프로덕트라고 생각해요. 이용 가이드나 블로그에서 전달되는 정보는 더 심화된 사용을 원하는 사용자나 학습 의지가 충만한 사용자에게는 좋은 매개체가 될 수 있지만, 일반적인 대다수 사용자에게는 프로덕트를 사용하는데 학습이 필요하다는 것은 큰 허들이 된다고 생각해요. 그래서 사용자에게 필수적인 정보들은 프로덕트를 사용하기 쉽게 만들거나, 정보를 충분히 전달해야 사용자들이 Churn 하지 않고 계속 사용할 수 있다고 생각합니다. 꼭 필요한 경우에만 이용 가이드를 연결해 불편사항을 해결하고 있습니다.

## 🐣 A/B 테스트를 진행할 때 어떤 점을 유의해야 하나요?

**Alley:** 일반적으로 통계적으로 유의미한 실험 결과를 위해서는 충분한 숫자가 뒷받침되어야 객관성을 확보하고 편향적이지 않은 데이터를 얻을 수 있다고 알고 있는 경우가 많아요. 하지만 A/B 테스팅에서는 사용자의 숫자는 그렇게 중요하지 않습니다. 충분한 사용자 수가 확보되어야 한다는 전제가 있는 경우, 사용자가 많지 않은 서비스의 경우 그 숫자를 채우기 위해 아주 긴 시간 동안 테스트를 할 수밖에 없는 경우가 생기기 때문입니다. 오히려 가장 중요한 것은 &apos;테스트 기간&apos;이라고 할 수 있습니다. 핵클이 권장하는 최소 테스트 기간은 7일입니다. 각 요일별로 사용자 행동 추이가 달라질 수 있기 때문에 요일이라는 변수를 모두 반영할 수 있는 테스트 결과를 받아보기 위함입니다.

테스트 결과를 해석할 때는 목표로 설정한 핵심 이벤트 지표를 종합적으로 고려해야 올바른 결정을 내릴 수 있습니다.

![](https://miro.medium.com/max/1400/1*9Hr-3mRcNNcmNCAw4Q2nzA.png)

&lt;figcaption&gt;배송비를 각기 다르게 제공했을 때 구매 전환율, 평균 구매 금액, 구매 횟수는 어떻게 변할지에 대한 테스트 예시&lt;/figcaption&gt;

예를 들어 A안은 &apos;배송비를 기존 금액으로 안내&apos;, B안은 &apos;배송비를 2천원 더 올린 금액으로 안내&apos;로 나누어 테스트하여, 구매 전환율, 평균 구매금액, 구매 횟수 등 데이터를 비교하는 시나리오를 생각해보겠습니다.
만약 B안의 결과가 A안 대비 구매 전환율 `-3%`, 평균 구매 금액 `+5,000원`, 구매 횟수 `-0.3%`이라고 했을 때 어떤 결정을 해야 할까요?

평균 구매 금액이 증가했음에도 불구하고, 구매 전환율과 구매 횟수가 감소한 것이 최종 매출에 영향력이 더 큰 경우 A안을 최종 선택하겠죠.
반대로 구매 전환율과 구매 횟수가 감소했음에도 평균 구매 금액이 증가한 것이 최종 매출에 영향력이 더 큰 경우 B안을 최종 선택할 것입니다.

A/B 테스트는 서비스의 특성이나 비즈니스 방향성, 현재 사용자의 행태 등 다양한 요소에 의해 결과 데이터의 통계적 차이가 유의미하다고 볼지 달라질 수 있습니다. A/B 테스트를 통해 얻어야 하는 가장 중요한 인사이트는 신규 사항을 출시하기 전 실제 사용자를 대상으로 테스트하여 얻은 데이터를 바탕으로 **해당 기능의 영향력에 대해 이해한 뒤 의사결정**하는 것입니다. 모든 신규 기능 및 개선 사항이 긍정적인 결과만 가져오는 것이 아니며, 부정적인 결과도 해당 기능으로 인한 영향력인지를 파악하지 못한다면 장기적인 서비스 성장에 큰 걸림돌이 될 수 있기 때문입니다.

---

# 🏃🏻‍♀️ 앞으로 더 성장할 핵클

## 💎 핵클 프로덕트는 어떤 문제를 해결하고자 하고, 어떤 지향점을 가지고 있나요?

**Alley:** 핵클의 궁극적인 목표는 **고객분들이 성장하는데 필요한 모든 서비스를 제공**하여, **개발 리소스를 줄이고 데이터 기반의 의사결정이 가능한 환경을 제공**하는 서비스가 되어 **고객과 함께 성장하는 기업**이 되는 것이 목표입니다. 현재는 A/B 테스트 툴에 주력하고 있으나 다양한 고객분들의 사용 방향을 지속적으로 관찰하면서 필요로 하는 여러 기능들을 추가로 제공하고자 노력하고 있습니다.

프로덕트 사용과 수익화 단계를 AARRR 프레임워크로 보았을 때, 프로덕트 디자이너 입장에서 가장 어려운 부분은 역시 Activation과 Retention 단계에요. 사용자 모객 단계의 경우 세일즈의 영향을 많이 받는 단계이지만, Activation과 Retention 단계는 실제적인 제품 만족도가 큰 영향을 끼친다고 생각해요.

특히 B2B SaaS 툴은 사용하는 고객에 따라 사용 방법이 조금씩은 상이할 수 있는데, 자유도를 높이면 높일수록 사용성이 떨어지게 되는 딜레마가 저의 오랜 숙제에요. 이를 위해 지속적인 사용자 인터뷰 및 실제 고객의 사용 방식을 확인할 수 있는 다양한 데이터를 확인하고, 새로운 기능을 출시하기 위해 노력하고 있습니다.

그중 프로덕트 디자이너 입장에서는 A/B 테스트에 대한 경험이 없거나 필요성을 인지하지 못한 예비 고객들에게 어떻게 다가가고 이해시킬 것인가를 가장 중요한 문제로 보고 있습니다. 이 문제를 해결하기 위해 디자인 작업 전반에서 각 기능이나 단어들을 고객들이 이해가 쉬운 내용으로 구성하고, 핵클 A/B 테스트를 사용했을 때 얻을 수 있는 장점을 더 많이, 그리고 쉽게 느낄 수 있도록 노력하고 있습니다.

**👇 AARRR 프레임워크란?**  
&gt; - Acquisition : 사용자 모객 단계  
&gt; - Activation : SDK 설치, 최초 아하 모먼트 경험, 사용자 교육 및 온보딩 단계  
&gt; - Retention : 서비스의 반복 사용, 능숙한 사용 단계  
&gt; - Referral : 만족 &amp; 추천 단계  
&gt; - Revenue : 고객 수익화 단계

## 🚴🏻 핵클은 어떻게 일하고 있나요? 조직 구조와 문화를 알려주세요

**Alley:** 저희 핵클은 A/B 테스트 플랫폼을 제공하는 기업인 만큼 데이터 기반의 의사결정을 중요시 여기는 조직이에요. 누구나 적극적으로 의견을 제시하고, 데이터 기반으로 검증해 의사결정 하며, 이 과정에서 입사 시기나 연차는 전혀! 중요하지 않습니다. 누구나 의견을 내고 데이터를 통해 검증하는 열려있고 데이터 친화적인 문화를 가지고 있습니다.

또 빠른 성장이 중요한 스타트업인 만큼 한정적인 업무 리소스를 효율적으로 사용하기 위해 비즈니스 우선순위가 높고, 고객에게 더 많은 임팩트를 제공할 수 있는 업무를 우선하여 진행하고 있습니다. 뛰어난 실력을 갖춘 인재도 좋지만, 성장 가능성이 큰 인재를 선호하며 함께 성장할 인재를 찾고 있습니다!

### [🙋🏻‍♀️ 핵클에서 함께 일할 동료를 찾습니다! &gt;&gt;](https://www.notion.so/Careers-956e26a7796e4e6dbaa1bee043947045)

---

### B2B 디자이너들의 모임 소개   
B2B 프로덕트를 만들고있는 B2B 디자이너들은 B2C 디자이너보다 더 어려운 문제를 풀고 있는 경우가 많은데 비해 자료, 지식, 피드백을 찾는데도 어려움을 겪고 있습니다.

더 많은 B2B 프로덕트 디자이너들이 한 자리에서 어려운 점, 배운 점을 공유하고 서로 도움이 되기 위해 커뮤니티를 운영중입니다.

[🔗 B2B 디자이너들의 모임 노션 바로가기](https://abit.ly/b2b-designers)</description>
          <pubDate>Sun, 01 Aug 2021 04:40:45 +0900</pubDate>
          <link>http://localhost:4000/project/b2b_designers_ask_alley/</link>
          <guid isPermaLink="true">http://localhost:4000/project/b2b_designers_ask_alley/</guid>
        </item>
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    

    
    
        
        <item>
          <title>B2B 디자이너로 일한다는 것</title>
          <description>&lt;p class=&quot;text-gray&quot;&gt;
 🔗 이 글은 Varun Mohapatra가 &lt;a href=&apos;https://uxdesign.cc/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink1&apos; onclick=&apos;clickedOutlink(outlink1)&apos;&gt;&lt;img src=&apos;https://www.google.com/s2/favicons?sz=64&amp;domain=https://uxdesign.cc&apos; style=&apos;display:inline; height: 1em; position: relative; bottom: -2px;&apos;&gt;UX Collective&lt;/a&gt;에 올린 &lt;a href=&apos;https://abit.ly/article_45&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink2&apos; onclick=&apos;clickedOutlink(outlink2)&apos;&gt;아티클&lt;/a&gt;을 번역, 요약한 글입니다.
&lt;/p&gt;

저자는 B2B 프로덕트와 기업용 애플리케이션을 동일하게 간주하여 말하고 있습니다. 저자는 B2B를 Enterprise로 표현하고 있지만 번역 후 해석의 용이성을 위해 이 글에서는 모두 B2B로 표현합니다.

2018년 1월 글이지만 제가 B2B, SaaS를 디자인하면서 공감이 되는 글이라 번역에 옮깁니다.

## ⚡️ 요약
**1. 기능적 복잡도 😓**
&gt; B2B 프로덕트는 복잡합니다. 사용자도 B2B 프로덕트를 익혀 잘 사용하기까지 리소스를 투자해야 합니다. 이 말은 B2B 프로덕트의 기능 릴리즈는 아주 비싸다는 말입니다. 하나의 기능을 릴리즈하기 전에 충분히 디자인씽킹 하고, 모든 가능성을 점검한 후 인터페이스를 디자인해야 합니다.

**2. 근로자(실사용자) 마인드셋을 위해 디자인하기 💼**
&gt; B2C 프로덕트와 가장 다른 점이라고 할 수 있습니다. B2B 프로덕트는 기업 사용자의 업무를 효율적으로 처리하기 위해 존재하므로 사용자의 사용 목적부터 다릅니다. 사용자의 도메인에 대해 자세하게 이해하고 그들의 워크플로우를 뜯어볼 수 있어야만 진정으로 사용자에게 유용한 B2B 프로덕트를 만들 수 있습니다.

**3. 높은 전환 비용을 인지하기 😟**
&gt; B2B 프로덕트는 이미 존재하는 워크플로우를 빠르고/효율적이고/더 낫고/더 저렴한 방식으로 해결할 방법을 제안하는 것입니다. 따라서 경쟁 프로덕트가 있는 경우가 많은데, 한 프로덕트에서 다른 프로덕트로 옮겨가는 전환 비용이 B2B 프로덕트에서는 더 클 수밖에 없습니다. 높은 전환 비용이 있음에도 불구하고 우리 프로덕트를 사용할 수 있도록 데이터 마이그레이션 과정을 최적화 고, 사용법을 쉽게 익힐 수 있게 하고, 경쟁 프로덕트보다 더 저렴하면서도 더 효율적으로 일을 처리할 수 있는 프로덕트를 만들어야 합니다.

**4. 새로운 기능과 가능성을 만드는 것을 우선순위로 두기 😤**
&gt; B2B 프로덕트는 사용자들의 끊임없는 요구사항을 프로덕트의 비전에 맞추어 달성 해나가야 합니다. 하지만 혁신적인 프로덕트는 사용자의 이야기를 실현하는 것만으로는 달성할 수 없습니다. 포드가 자동차를 처음으로 만들 때 사람들은 더 빠른 말만을 원하고 있던 것처럼요. B2B 디자이너는 사용자가 원하는 새로운 기능을 만드는 것과 혁신의 가능성을 만드는 두 측면을 항상 생각해야 합니다.

**5. UX 일관성을 유지하기 😊**
&gt; 원 글은 2018년에 작성되었기 때문에 저자의 요점과 다른 점에서 풀어보도록 하겠습니다. B2B 프로덕트는 다양한 사용자가 각자의 워크플로우에 맞는 다양한 기능을 사용하기 때문에 한 프로덕트에서도 사용 케이스가 세세하게 분화되기 마련입니다. 한 사용자의 사용 케이스가 변화하더라도 일관된 UX를 제공해야 하는데, 프로덕트 팀이 커질수록 이를 지키기가 어려워집니다. 작게는 디스크립션 레이블 어미에서 크게는 특정 기능이 사용되는 방식까지 달라지는 것을 경험할 수 있습니다. 항상 내가 디자인 하는 기능이나 개선사항이 다양하게 사용될 수 있음을 인지하고 일관된 UX를 구현할 수 있도록 여러 업무 유관자와 커뮤니케이션 하는 것이 중요합니다.

**6. 모든 디자이너가 B2B 프로덕트를 좋아하진 않는다 😢**
&gt; 많은 디자이너들의 호불호가 갈리는 지점은 B2B 프로덕트는 화려하고 심플한 UI로 사용자들을 사로잡는 게 아니라, 업무를 잘 도와줄 수 있도록 예측가능하고 명확한 디자인을 해야한다는 점입니다. B2B 디자인은 익숙하지 않은 도메인과 복잡한 프로덕트 구조 속에서 기업 사용자가 가지는 복잡한 문제를 해결해나가면서 빠르게 개인의 역량을 성장시킬 수 있습니다.

---

![B2B design](img/B2B_design.png)

## Intro


내가 &lt;a href=&apos;https://www.vwo.com/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink3&apos; onclick=&apos;clickedOutlink(outlink3)&apos;&gt;VWO&lt;/a&gt;에서 일을 시작하면서 이런 의문을 느낄만 한 순간들이 많이 있었다. 기업용 애플리케이션(B2B)는 정말 일반 소비자용 앱(B2C)와 다른가? 다른 점이 있다면 디자이너와 디자인 프로세스에 어떤 영향을 미치는가?

지난 몇 년간 내가 경험한 점들을 B2B 팀에 입사하려고 하거나 이미 일하고 있는 사람들에게 공유한다.

## 기업용 애플리케이션이란 무엇인가?

위키피디아는 다음과 같이 정의하고 있다.

&gt; An enterprise application is a computer software used to satisfy the needs of an organization rather than those of individual users.  
기업용 애플리케이션은 개인 사용자보다 조직의 니즈를 충족시키기 위한 컴퓨터 소프트웨어이다.

![B2B product example](img/b2b_product_example.png)

&lt;figcaption&gt;한 번쯤 봤을 기업용 프로덕트의 예시&lt;/figcaption&gt;

오늘날의 기업 환경에서, 대부분의 B2B 프로덕트는 복잡하고, 확장성 있고, 분산되어있고, 컴포넌트 중심이고, 중요한 미션을 가지고 있다. 기업용 애플리케이션은 비즈니스 프로세스를 지원하거나 자동화하기 위해 복잡하고 많은 양의 데이터를 적재하고, 가공하고, 제공하는 데 의의가 있다.

기업용 툴은 조직과 그 구성원들이 더 잘 일할 수 있도록 하는 프로덕트를 만드는 것이다.

*메모: &apos;기업용&apos;과 &apos;B2B&apos; 용어 정의에서 약간의 차이가 있긴 하다. 하지만 오늘날의 소프트웨어 환경에서 이러한 차이점은 중요하지 않으며, 이 글의 목적에 따라 둘을 동일한 의미를 가집니다.*

&lt;figcaption&gt;(*역자 주: 아래부터는 기업용 애플리케이션을 모두 B2B 프로덕트로 칭하겠습니다)&lt;/figcaption&gt;

## B2B 프로덕트 디자인은 B2C 프로덕트를 디자인하는 것과 어떻게 다를까?

B2B 프로덕트 디자인은 생각만큼 많이 다르지는 않다. 모든 좋은 디자인을 위한 원칙이 동일하게 적용된다. 하지만 B2C 프로덕트를 디자인하는 것과 B2B 프로덕트를 디자인 하는 것에 약간의 다름이 있다.

**시장에 내놓을 자동차를 만드는 것**과 **상업용 비행정을 만드는 것**을 생각해보자. 둘 다 A에서 B로 사람들을 이동시킬 고도의 엔지니어링 디자인이 접목되지만 사용 방법, 제조에 소요되는 시간, 테스팅 &amp; 안전 기준, 사용자들의 기대, 구매 &amp; 소유와 같이 디자인과 프로세스에 영향을 주는 모든것에 명확한 차이가 있다.

&gt; 마찬가지로 B2B 앱의 경우 앱이 목표로 하는 고유한 문제와 그 접근 방식에 항상 차이가 있습니다.

## 직면하게 되는 문제:

*알림: 이런 문제 중 몇몇은 어떤 종류의 소프트웨어를 디자인하든 동일하게 직면하는 문제들도 있지만, B2B 프로덕트 디자인에서는 훨씬 차별적으로 나타납니다.*

## 1. 기능적 복잡도 😓

B2B 앱은 여러 데이터 상태, 시각화 옵션, 관리 작업, 여러 사용자의 협업, 다른 소프트웨어와 연동과 같이 셀 수 없는 요소가 있기 때문에 복잡도 규모는 보통 B2C 앱보다 더 크다. 하나의 요구사항을 만족시키기 위한 모든 디자인 의사결정이 다른 여러 요구사항에 영향을 미치고, 종종 어떤 임팩트가 있을지 예상하기까지 어렵다. 겉보기에 간단해 보이는 기능을 추가하는데 온갖 종류의 엣지 케이스를 확인해야 하는 과정을 거쳐야만 한다.

![Jira Example](img/jira_example.png)

&lt;figcaption&gt;(2018년이라 현재 화면과 약간의 차이가 있습니다) 아틀라시안의 &apos;지라&apos;의 화면 : 복잡한 기능적 요구사항의 예시&lt;/figcaption&gt;


### 💪 해결하는 방법:

복잡성을 해결하는 방법은 뭘까? — 답은 당연히 단순성이다. 인터페이스의 단순성을 최근(*2018년) 유행하는 미니멀 UI와 혼동하지 말라. 여기서 말하는 단순성은 적절한 계획과 프로세스를 통해 구현된 것을 말한다. 프로덕트 사이클이 얼마나 타이트하든 &apos;디자인씽킹&apos;하는 것과 디자인을 시작하기 전에 우리가 수집한 일련의 요구사항과 기능 명세들을 정리하는데 시간을 투자하는 것이 중요하다. 사실 이 과정은 디자인의 대부분이라고 할 수 있다.

당신이 떠올린 해결책이 확실하다고 생각할 때면 곧바로 스케치, 피그마, 포토샵을 켜고 싶은 것은 아주 자연스러운 경향이지만 실은 너무 이른 경우가 대부분이다. 전체적인 컨텍스트와 발견 점을 정리하고 내가 어떤 것을 디자인할지에 대해 정리할 수 있는 시간을 갖는것이 중요하다. 리서치와 계획하는 단계를 거치고, 모든 가능성을 발견하고 모든 엣지 케이스를 다뤄야 한다. 마침내 준비되었을 때 인터페이스를 다듬기 시작하자.


```
&quot;나에게 만약 나무를 자를 6시간이 주어진다면, 나는 첫 4시간을 도끼를 날카롭게 가는데 쓰겠다.&quot;
— 격언
```


&gt; 적절한 계획과 작업 과정을 거치게 되면 장기적으로 보상받을 것이며, 결국 논리적이고 버그 없는 프로덕트 경험을 이끌어낼 것이다.

## 1. 근로자(실사용자) 마인드셋을 위해 디자인하기 💼

B2B 프로덕트 사용자의 마인드셋과 행동 양식은 일상적인 B2C 사용자와 매우 다르다. 기업 사용자들은 일반적으로 그들의 일을 효율적으로 완료하는 것 이외에도 그들의 커리어 성장, 배움, 조직에서의 성공과 같은 다른 목표가 있다. 프로페셔널 근로자들을 위해 디자인 하는 것은 그들의 업무 컨텍스트, 워크플로우, 환경, 소명, 문제와 그들이 사용하고 있는 현재 솔루션에 대해 잘 이해하는 것이 필요하다.

### ✌️ 최고로 잘 할 수 있는 방법:

B2B 프로덕트는 프로덕트 자체에 대한 사용자의 니즈를 넘어 그들의 직업과 커리어에 대한 이해가 아주 중요하다. 최종 사용자와 직접 대화하고, 그들의 도메인을 조사하고 그들의 현재 방식을 체험해보는 것은 사용자에 대한 공감을 발전시키는 데 유용하다.

또한 사용자들은 종종 현재 워크플로우와 루틴에 익숙해져 있어서 그들이 진짜로 원하는 것이 무엇인지 상상하기 힘들어한다. 그들이 말하는 기능과 옵션들은 프로덕트 혁신으로 향하는 길을 밝혀줄 수 없는 것을 말하는 것일 수도 있다.

![User Needs](img/user_needs_example.png)

&lt;figcaption&gt;당신의 사용자들은 그냥 더 많은 것이 더 좋다고 생각할 수 있다&lt;/figcaption&gt;

B2B 프로덕트 팀을 위한 가이드 원칙은 고객들이 현재 어떤 부분에서 난관을 겪고 있는지 알고, 이 이슈들을 해결하는데 미래에 프로덕트가 무엇을 해야 할지 길을 그리는 것이다. 사용자의 장기적인 목표를 알고 난 다음 디자이너들이 할 수 있는 일이 많아진다.

```
사람들은 더 나은 자신이 되기 위해 프로덕트를 구매한다 — JTBD (https://jtbd.info/)
(*Jobs To Be Done)
```

&gt; 사용자들이 자신이 원하는 것이 뭔지 말하는 것에 집중하지 말고, 그들이 어떻게 행동하는지에 집중하고 그 포인트에서 혁신을 끌어내야 한다. 아이디어를 린하게 프로토타입으로 만들어 사용자에게 테스트 해야 한다.

## 3. 높은 전환 비용을 인지하기 😟

종종 기업 사용자들은 지금 가지고 있는 워크플로우에 너무 익숙하고 만족하고 있어서 다른 프로덕트로 변경해야 할 니즈를 전혀 느끼지 못하기도 한다. 심지어 다른 프로덕트로 변경하고자 할 때도, 여러 사람의 동의와 합의가 필요하기까지 한다. 당연히 현존하는 데이터를 마이그레이션 하는 것은 회사와 근로자 모두에게 불편사항이기도 하다. 일반적인 소비자 앱과는 달리, B2B 프로덕트를 변경하기 위한 전환 비용은 상당히 높다.

### 😳  관리하는 방법:

기업에게 프로덕트를 변경하라고 설득하는 방법에는 크게 2가지가 있다.

1. **경쟁 프로덕트보다 기능적으로 훨씬 더 나아야 한다**
2. **현재 워크플로우를 재정의해서 사용자에게 현재보다 훨씬 더 빠르고/낫고/효율적이고/매력적이게 한다**

두 번째 방법에서 디자인이 진가를 발휘할 수 있다. 생산성, 워크플로우, 프로세스는 조직에게 굉장히 중요한 요소이다. 그들의 현재 솔루션을 잘 살펴보고, 어느 부분에서 그들이 난관을 겪고 있는지 확인해보자. **더 빠른 워크플로우, 더 높은 효율성, 더 낮은 비용을 실현할 수 있는 요소를 찾아보자.** 이런 면들에서 혁신이 있다면 기업들이 점프하도록 설득할 수 있는 해결책으로 이어질 수 있다.

```
사람의 행동을 변화시키는 것만이 혁신을 측정하기 위한 가장 최고, 유일, 진정하고 직접적인 방법이다.
— Stewart Butterfield, Slack의 공동창업자
```

&gt; 현재 접근방식을 더 효율적으로 바꿀 기회를 항상 찾아야 한다.

## 4. 새로운 기능과 가능성을 만드는 것을 우선순위로 두기 😤

B2B 프로덕트는 기존 사용자 경험을 강화하는 것 보다 새로운 기능을 만드는 것이 거의 모든 순간에서 우선한다. 프로덕트가 첫선을 보이는 시기엔 디자인 스프린트를 열성적으로 가져가는 것이 일반적이지만, 프로덕트가 출시된 후에는 기능을 계속해서 추가해야만 한다. 유료 고객들은 새로운 가능성과 추가 기능을 계속해서 요구할 것이다. 프로덕트 팀은 앞에 놓여있는 바쁜 로드맵을 미리 계획합니다. 이 시점에서는 디자이너가 업무 관계자들에게 UX와 디자인을 개선하는데 시간을 투자하자고 설득하는 것이 특히 더 힘들 수 있다.

### 😳 해결하는 방법:

주어진 상황을 업무 관계자들의 입장에서 그려보라. 그들은 어느 스프린트, 어느 주나 어느 월에서든 새로운 기능을 개발하거나 가능성을 추가하지 않는 것은 잠재적인 수익을 어느 정도 잃는 것과 같다고 생각한다. 따라서 사람들에게 UX나 디자인 개선이 가지는 힘이나, 개선했을 때 기능을 추가함으로써 가져올 수 있는 수익보다 더 큰 임팩트를 줄 수 있음을 이해시키는 게 중요하다. 성공 사례를 이야기하고, 상위 의사결정자에게 직접 이야기해서 그들의 마음을 이끌어내라. 개선사항을 디자인 하는 것은 항상 페인 포인트를 주의 깊게 분석하고, 아이디어를 실험해야 하므로 시간과 혁신이 필요할 것이다.

또, 현존하는 프로덕트를 개선하는 것은 성장하는 회사에 아주 중요하기 때문에 훈련 삼아 한 번씩 자신의 프로덕트나 경쟁 프로덕트가 없다고 생각하고 완전 처음부터 솔루션을 브레인스토밍 하는 것을 추천한다. 이렇게 한다면 즐거운 놀라움을 경험하게 될 것이다.

```
&quot;전구는 촛불의 지속적인 개선에서 나온 것이 아니다.&quot;
— Oren Harari
```

회사를 설득한 다음엔 시간을 정한 스프린트에서 작은 성공을 경험하는 것으로 시작하고, 그 성공의 임팩트를 항상 측정하자. 회사가 디자인에 믿음을 서서히 가지도록 만들어서 점점 더 큰 개선과 실험으로 나아가라.

&gt; 프로덕트 팀과 엔지니어링 팀이 좋은 UX를 구현할 수 있도록 헌신해달라고 부탁하고, 이게 디자인 팀만의 일이 아님을 알려주자.

## 5. UX 일관성을 유지하기 😊

![UX Challenges Survey](img/ux_challenges_survey.png)

&lt;figcaption&gt;출처: &lt;a href=&apos;https://www.uxpin.com/enterprise-ux-design-2017-2018-industry-report&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink4&apos; onclick=&apos;clickedOutlink(outlink4)&apos;&gt;
Enterprise UX Industry Report 2017–2018&lt;/a&gt;&lt;/figcaption&gt;

최근(*2018년) 3,000개 이상 기업의 디자이너를 대상으로 한 설문조사에서 디자인 팀이 가장 직면하고 있는 가장 큰 문제는 UX 일관성이었다. 일반적인 소비자용 프로덕트와 다르게, B2B 프로덕트는 더 긴 프로덕트 사이클을 가지고 있고 여러 팀으로 나누어져서 병렬적으로 실행되는 경우가 많다.

모든 디자이너들은 다른 팀들과 똑같이 프로덕트의 컴포넌트, 디자인 패턴, 심지어 컬러와 같은 디테일을 변경할 때 일관성을 유지하지 못하는 문제에 직면하고 있다. 이런 문제점은 팀 사이즈가 크거나 프로덕트가 확장하게 될 때 곱절이 되어버린다.

### 💪 해결하는 방법:

많은 회사가 장기적인 일관성과 확장성을 위해 **디자인 시스템**을 만들게 된다. 디자인 시스템은 명확한 기준으로 가이드 된 재사용 가능한 컴포넌트의 집합이고, 조합을 통해 여러 종류의 애플리케이션을 만들 수 있다. 디자인 시스템은 보통 다음을 포함한다:

1. **가이드라인** (디자인 원칙, 코드 컨벤션, 편집 가이드라인 등)
2. **비주얼 애셋** (컬러 팔레트, 타이포그래피 스케일, 아이콘 등)
3. **UI 패턴** (폼, 버튼 스타일, 페이지 패턴 등)
4. **사용과 유지보수**를 위한 포인트들

B2B 프로덕트 팀들에게 디자인 시스템이 있는지 물어보았을 때, 55% 정도는 가지고 있거나 만들고 있는 중이라고 답변했다(*2018년 기준!). 이것은 긍정적인 신호이다. 한 가지 알아두어야 할 점은 디자인 시스템을 100% 끝내는 순간은 없다는 것이다. 장기적으로 만들어나가야 하는 것이고, 시간이 지나면서 진화해 나가는 것이다.

```
&quot;각 요소의 디자인은 제작하기 쉬워야 하고, 고치기도 쉬워야 한다.&quot;
— Leo Fender
```

&gt; **디자인 시스템은 일관성 있는 UX를 만들기 위한 큰 발걸음이다.**
&gt; &lt;br&gt;&lt;br&gt;
&gt; 영감을 얻을 수 있는 B2B 프로덕트 디자인 시스템의 예시: Salesforce의 &lt;a href=&apos;https://www.lightningdesignsystem.com/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink5&apos; onclick=&apos;clickedOutlink(outlink5)&apos;&gt;Lightning Design System&lt;/a&gt;, Intuit의 &lt;a href=&apos;https://designsystem.quickbooks.com/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink6&apos; onclick=&apos;clickedOutlink(outlink6)&apos;&gt;Quickbooks&lt;/a&gt;(구 Harmony Design System)

&lt;p class=&quot;text-gray&quot;&gt;*역자 주. 역자가 추천하는 공개된 디자인 시스템의 예시도 추가합니다:&lt;/p&gt;  
&gt; Segment의 &lt;a href=&apos;https://evergreen.segment.com&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink7&apos; onclick=&apos;clickedOutlink(outlink7)&apos;&gt;Evergreen&lt;/a&gt;, Atlassian의 &lt;a href=&apos;https://atlassian.design/foundations/accessibility&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink8&apos; onclick=&apos;clickedOutlink(outlink8)&apos;&gt;Design System&lt;/a&gt;, Elastic Search의 &lt;a href=&apos;https://elastic.github.io/eui/#/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink9&apos; onclick=&apos;clickedOutlink(outlink9)&apos;&gt;Elastic UI&lt;/a&gt;, IBM의 &lt;a href=&apos;https://www.ibm.com/design/language/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink10&apos; onclick=&apos;clickedOutlink(outlink10)&apos;&gt;Design Language&lt;/a&gt;, Google의 &lt;a href=&apos;https://material.io/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink11&apos; onclick=&apos;clickedOutlink(outlink11)&apos;&gt;Material Design&lt;/a&gt;, SendGrid의 &lt;a href=&apos;http://styleguide.sendgrid.com/index.html&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink12&apos; onclick=&apos;clickedOutlink(outlink12)&apos;&gt;StyleGuide&lt;/a&gt;, Zendesk의 &lt;a href=&apos;https://garden.zendesk.com&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink13&apos; onclick=&apos;clickedOutlink(outlink13)&apos;&gt;Garden&lt;/a&gt;, Microsoft의 &lt;a href=&apos;https://www.microsoft.com/design/fluent/#/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink14&apos; onclick=&apos;clickedOutlink(outlink14)&apos;&gt;Fluent&lt;/a&gt;, Mixpanel의 &lt;a href=&apos;https://design.mixpanel.com/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink15&apos; onclick=&apos;clickedOutlink(outlink15)&apos;&gt;Design System&lt;/a&gt;

## 6. 모든 디자이너가 B2B 프로덕트를 좋아하진 않는다 😢

B2B 프로덕트를 위해 일해본 디자이너 중 이 일이 지루하다고 생각하는 사람이 많다. 에이전시나 B2C 백그라운드를 가진 사람들은 B2B에서 일하는 것이 다양성이 부족하고 흥분되지 않는다고 생각하기도 한다. 우리가 dribbble에서 침 흘리며 보는 멋진 마이크로 인터랙션 비주얼과 애니메이션을 만들 기회는 잘 오지 않는다. 이런 경우 업무는 늘어지게 되고 디자이너들은 뭔가가 빠진 것처럼 동기부여가 되지 않게 된다

### 😳 방지하는 방법:

B2B 프로덕트 디자인은 고객들의 과업을 해결해주어 그들이 직장에서 더 나은 삶을 살 수 있도록 돕는 데 있다. (위험하지만 않다면) 사용자를 홀릴 수 있는 UI를 만드는 것은 언제나 우선순위 리스트 중 가장 하단에 있을 것이다. **보는 즉시 직관적으로 어떻게 작동할지 알 수 있는 표준화되고, 예측 가능한 사용자 인터페이스가 타겟 고객들에게 가장 좋은 UI이다.**

&gt; 우리의 목표는 사용자들에게서 **&quot;와우!&quot;** 를 받는것이지만 — 프로덕트가 그들의 일을 얼마나 효율적으로 돕는지로부터 와야 하지, 아름다운 UI로부터 와야 하는것이 아니다

B2B 디자인 팀을 구성할 때 목표와 동기가 일치하는 디자이너를 선택하는 것은 중요하다. 동기라 함은 복잡한 문제를 풀고, 자신의 디자인이 사용자의 일을 완료하는데 어떻게 도움이 되는지 보는 것에서 와야 한다.

&gt; ***따라서, 팀에 들어올 모든 디자이너들에게 이후 일어날 일들을 예상하게 하고 올바른 기대치를 설정하는 것이 중요하다.***

---

## B2B 디자인에 입문할 때 필요한 일반적인 조언 몇 가지

**B2B는 진화하고 있다.** B2B 프로덕트는 더이상 삐걱거리고 지겨운 것이 아니다. 오늘날 사용자들은 일반적인 B2C 앱에서 경험한 퍼포먼스와 경험을 원한다. 그들은 아름다운 UI를 즐기며, 첫 시작 전에 문서를 읽어야만 하는 것을 싫어한다. 차세대 기술인 VR, AI와 음성 인터페이스는 이미 우리의 일상 생활에 들어왔으며, 얼마 지나지 않아 우리의 업무 생활에도 들어올 것이다. B2B 프로덕트에게는 흥분되는 시기이며 디자이너들이 할 수 있는 일은 끝없이 있다.

당신에게 도움이 될 3가지 가이드:

1. **유연함과 모듈화를 받아들여라.** 디자인할 모든 것이 진화하고 성장할 것으로 생각해야 한다. 현재의 니즈에 딱 알맞은 컴포넌트를 만들려고 하지 말고 미래의 니즈도 반영할 수 있도록 유연하고 확장성 있게 만드는데 중점을 두어야한다.
2. **규칙과 프로세스를 정립하라.** 훌륭한 협업, 탄탄한 사용자 리서치, 액션 가능한 문제 정의, 집중된 디자인 이터레이션들은 한 번씩 달성할 순 있지만 매번 모든 것을 달성하기란 어려운 일이다. 효율적인 방법은 반복 가능한 프로세스를 만들고 매 사이클마다 조금씩 개선해나가는 것이다.
3. **전체를 생각하라.** 당신의 디자인과 추가되는 기능들이 프로덕트 전반과 회사의 비전에 어떤 영향을 주는지에 대해 항상 인지하고 있어야 한다. 당신이 만들고, 추가하고, 개선하는 모든 것에 전체적인 관점으로 접근한다면 결국 논리적이고 일관된 프로덕트 경험으로 이어지게 될 것이다.

---

### B2B 디자이너들의 모임 소개   
B2B 프로덕트를 만들고있는 B2B 디자이너들은 B2C 디자이너보다 더 어려운 문제를 풀고 있는 경우가 많은데 비해 자료, 지식, 피드백을 찾는데도 어려움을 겪고 있습니다.

더 많은 B2B 프로덕트 디자이너들이 한 자리에서 어려운 점, 배운 점을 공유하고 서로 도움이 되기 위해 커뮤니티를 운영중입니다.

[🔗 B2B 디자이너들의 모임 노션 바로가기](https://abit.ly/b2b-designers)</description>
          <pubDate>Sat, 14 Aug 2021 08:37:45 +0900</pubDate>
          <link>http://localhost:4000/blog/article_summary-7/</link>
          <guid isPermaLink="true">http://localhost:4000/blog/article_summary-7/</guid>
        </item>
        
    
        
        <item>
          <title>프로덕트에 맞는 지표 발견하기</title>
          <description>&lt;p class=&quot;text-gray&quot;&gt;
🔗 이 글은 Cláudia Delgado가 본인의 &lt;a href=&apos;https://claudiatd.medium.com/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink1&apos; onclick=&apos;clickedOutlink(outlink1)&apos;&gt;&lt;img src=&apos;https://medium.com/favicon.ico&apos; style=&apos;display:inline; height: 1em; position: relative; bottom: -2px;&apos;&gt;미디엄 블로그&lt;/a&gt;에 올린 &lt;a href=&apos;https://abit.ly/article_43&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink2&apos; onclick=&apos;clickedOutlink(outlink2)&apos;&gt;아티클&lt;/a&gt;을 번역, 요약한 글입니다.
&lt;/p&gt;

## ⚡️ 요약
&gt; 프로덕트 관리를 위해 프로덕트 선행 지표는 반드시 필요합니다. 이 때 프로덕트 지표는 모든 것을 측정하려 해서는 안되고, 프로덕트를 더 나은 방향으로 만들기 위한 의사결정이나 액션을 할 수 있는 지표 중에서 선택해야 합니다.
&gt; 
&gt; **AARRR**, **HEART**, **북극성 지표** 세 종류를 적절히 혼합해 프로덕트 지표의 예시를 만들고 이에 대해 설명 합니다. 아래는 사용자의 각 단계 별 성공을 측정하기 위해 만든 프로덕트 지표의 예시입니다.
&gt; 
&gt; 본인의 프로덕트에 맞는 지표를 설정하는 것은 정해져 있는것이 아니라 항상 변화해야 합니다. 아래 예시에서도 본인의 프로덕트와 잘 맞는 부분은 프로덕트 별로 다 다를 것입니다. 프로덕트 지표를 선택하는 것은  가장 임팩트가 큰 것부터 집중하되, 필요하다면 각 단계를 더 심층적으로 들어가 살필 수도 있습니다. 프로덕트 지표를 선정하는 것은 프로덕트가 사용자의 어떤 단계와 상호작용 하는지, 프로덕트의 비즈니스 목표가 어떤지, 처음 수집하고 있던 데이터 셋에서 더 변화해나갈 부분은 있는지 등을 고려해서 계속해서 반복 개선해야 합니다.

&gt; - 획득(Acquisition)
&gt;   - 획득률 (Acqusition Rate)
&gt;   - 소스 별 획득률 (Acquisition by Source)
&gt; - 활성화/참여 (Activation/Adoption)
&gt;     - 활성화 비율 (Activation Rate)
&gt;     - 사용률 (Adoption Rate)
&gt;     - 최초 사용률 (First Time Rate)
&gt;     - 최초 사용까지 소요된 시간 (Time to First Action)
&gt; - 참여 (Engagement)
&gt;     - 활성 사용자 (Active User)
&gt;     - 행동 다 사용자 수 (Users per Action)
&gt;     - 사용자 별 행동 수 (Actions per User)
&gt;     - 행동 간 걸린 시간 (Time Between Actions)
&gt; - 작업 완료 (Task Success)
&gt;     - 성공률 (Success Rate)
&gt;     - 행동에 걸린 시간 (Time on Action)
&gt;     - 낭비 (Lostness)
&gt; - 행복감 (Hapiness)
&gt;     - 추천율 (Referral Rate)
&gt;     - 만족률 (Satisfaction Rate)
&gt;     - 만족 점수 (Satisfaction Score)
&gt; - 리텐션 (Retention)
&gt;     - 리텐션율 (Retention Rate)
&gt;         - &lt;i&gt;리텐션율을 볼 수도 있고, 반대 개념인 이탈율을 볼 수도 있다&lt;/i&gt;
&gt;     - 사용 시간 (Retained Time)
&gt;     - 업그레이드율 (Upgrade Rate)
&gt; - 수익
&gt;     - 사용자 당 수익 (Revenue per User)

---

## Intro

&apos;지표&apos;가 들어오고 나서부터 프로덕트 관리는 근본적으로 바뀌어버렸다.
![Product Management after Product Metrics](https://miro.medium.com/max/1648/1*G4srRM5VkRgGyCDLQmeNkQ.png)

&lt;figcaption&gt;Product Management after Product Metrics&lt;/figcaption&gt;

프로덕트 지표가 있기 이전에는 우린 눈을 가린채로 사격하고 있는것과 다름 없었다. 우리는 그저 경기가 끝나고 사격 결과가 어떤지 정도만 이해했을 뿐이다. 피드백과 학습의 루프는 너무나도 오래 걸렸다.

최초 우리는 비즈니스 지표에 주로 의존하고 있었다. 예를 들어 &apos;수익&apos; 이라는 지표를 생각 해보자. 수익은 후행 지표이다. 사용자 인게이지먼트의 감소가 수익에 반영되어 수익이 줄어들기 까지는 몇 달이 걸릴 수도 있다. 하지만 수익은 우리의 유일한 가시적인 지표였기 때문에 우리는 수익이 줄어든 후에나 반응할 수 밖에 없었다.

그 후로, 연결된 디바이스들은 전례없이 많은 데이터들을 쏟아내기 시작했고, 분석 툴에도 가시적인 개선이 있었다. 그 결과로 프로덕트 지표가 빠르게 확립되었다. 이제 우리는 거시적인 관점에서 사용자 행동을 이해할 수 있고 사용자 인게이지먼트가 감소하기 수 개월 전에 미리 대응할 수도 있다. 이제 우리는 사격의 결과를 바로 알 수 있게 되어서 즉시 그 결과에 적응할 수 있게 되었다.

프로덕트 지표는 프로덕트의 진행률을 측정하고 결과 지향적인 방식으로 얼라인을 맞출 수 있게 한다. 프로덕트 지표는 우리가 Data Informed, Data Inspired 되도록 하였고 실험을 하고자 하는 의욕을 고취시켰다. 이제 프로덕트 지표를 쓰지 않는다면 뒤쳐지게 되었다. 프로덕트 지표를 쓰지 않으면 사용자에 대해 이해도 덜 할 것이고, 불필요한 리스크도 지게 될 것이고, 똑똑하게 보단 열심히 일하게 될 것이고, 우리가 한 일이 발생시킬 효과에 대해서도 이해하기 힘들어질 것이다.

이제는 프로덕트 지표 없이는 살 수 없는 몸이 되었다..

## 무엇을 측정할 것인가?

이제 우리는 이벤트(우리 프로덕트에서 수행한 행동)를 트래킹 하고 프로퍼티(이벤트나 사용자에 관한 추가적인 정보)를 수집함으로써 우리의 사용자가 어떤 행동을 하는지 너무나도 쉽게 알 수 있게 되었다. 이 상황에서 드는 첫 번째 생각은 모든 것을 측정하자! 일 것이다. 이를 위해 아마 대시보드도 만들 것이고, 대시보드에는 숫자가 반짝이고 있을 것이다. 우리는 해냈고, 이정도로 밀도 있는 데이터를 다루고 있는 것에 나는 굉장히 중요한 일을 하고 있다고 생각하게 될 것이다.

![Don&apos;t measure everything](https://miro.medium.com/max/2400/1*ElzBBKD90of7LAC9-eWCtA.png)

&lt;figcaption&gt;Don&apos;t measure everything&lt;/figcaption&gt;

하지만, 우리가 할 일은 모든 것을 측정하는게 아니다. 우리가 해야할 일은 우리의 프로덕트를 더 나은 방향으로 만드는 것이다. 비즈니스적으로 실행 가능한 방식으로 우리 고객들에게 어떤 가치를 창출하는 것이다. 모든 프로덕트 지표 대시보드는 이를 실행하게 할 내부 도구일 뿐이다. 우리는 우리와, 우리와 함께 일하는 모든 사람들이 더 쉽고 더 가치있는 방식으로 이용할 수 있도록 만들어야 한다. 만약 우리가 모든 것에 대해 보고하기 시작하면, 모든 것이 노이즈가 될 뿐이다.

이 때문에 우리는 KPI(Key Performance Indicators), KEI(Key Experience Indicators)와 같이 주요 지표를 정의할 필요가 있다. 이 숫자들은 허영심이 만들어낸 숫자가 아니라, 우리가 의사결정하고 액션하는데 도움을 주는 작은 데이터 셋이다.

측정해야 하는 주요 항목들이 어떤 것들이 있는지 알려주는 여러 프레임워크들이 있다. 그 중에서 내가 가장 좋아하는 것들을 요약해보았다.

**[☠️ 해적 지표](https://www.youtube.com/watch?v=irjgfW0BIrw)** 혹은 해적 언어로는 **AARRR**. 이 프레임워크는 제품 단계를 각 사용자 라이프사이클에 따라 측정하는 방식을 제안한다.

![AARRR Framework](https://miro.medium.com/max/2400/1*9DlKcu8diC38xNR35oPmYA.png)

&lt;figcaption&gt;AARRR Framework&lt;/figcaption&gt;

**[❤️ HEART](https://library.gv.com/how-to-choose-the-right-ux-metrics-for-your-product-5f46359ab5be)**. 이 프레임워크는 사용자가 프로덕트와 어떻게 상호작용 하고 얼마나 만족하는지를 알아보기 위해 만들어졌다.

![HEART Framework](https://miro.medium.com/max/2400/1*y-ONePPGFZ1E0Sy-DP-mAQ.png)

&lt;figcaption&gt;HEART Framework&lt;/figcaption&gt;

**[⭐️ 북극성 지표](https://blog.growthhackers.com/what-is-a-north-star-metric-b31a8512923f)**. 이 프레임워크는 좀 더 급진적이고, 모든 프로덕트 노이즈를 가장 중요한 지표를 위해 제거해야 한다고 본다. 이 때 가장 중요한 지표는 장기적인 비즈니스 결과와 사용자에게 제공되는 핵심 가치의 관계를 가장 잘 나타내는 선행 지표를 말한다. 하지만 이 프레임워크도 북극성 지표에 가장 직접적인 영향을 주는 3에서 5개 보완적 지표를 포함하고 있다.

![North Star Framework](https://miro.medium.com/max/2400/1*OO76SNnTgQIQkWAgqMQ-3A.png)

&lt;figcaption&gt;North Star Framework&lt;/figcaption&gt;

측정해야 하는 주요 항목은 프로덕트에 따라 다르다. 그럼에도 불구하고, 우리는 이 세가지 프레임워크나 다른 적절하다고 생각되는 프레임워크에서 발견한 인사이트를 사용할 수 있다(그리고 사용 해야한다).

## 더 자세히 보기

더 자세히 보기 위해, 나는 일반적인 프로덕트가 가질법 한 표준 지표를 몇 가지 작성해보았다. ☠️ 해적 지표와 ❤️ HEART 지표가 말하는 영역을 늘어놓고, 여기서 주요한 항목들을 ⭐️ 북극성과 같이 트리 구조에 배치해보았다. 여기서 어떤 지표들은 다른 지표들보다 더 잘 발견될 수 있는데, 좋은 현상이다. 분석 대시보드는 가장 임팩트가 큰 것부터 집중하되, 필요할 때는 더 심층적으로 들어갈 수 있다.

![Tree-shaped Product Metric Structure](https://miro.medium.com/max/3848/1*WbcS7-VIH7OITvu5x4vcpQ.png)

&lt;figcaption&gt;Tree-shaped Product Metric Structure&lt;/figcaption&gt;

그럼 각 지표들을 더 심층적으로 살펴보도록 하자.

## Acquisition (획득)

획득 단계가 성공적인지 트래킹하기 위해 우리는 새로운 사용자들이 누구인지와 그들이 어떻게 프로덕트를 발견했는지에 대한 지표가 필요하다. 프로덕트 관리 관점에서 획득 지표는 우리가 마케팅 팀과 얼마나 잘 커뮤니케이션 하는지와 우리의 프로덕트가 타겟 사용자들에게 설득력 있는지를 알려준다.

![Acquisition](https://miro.medium.com/max/2400/1*JykEdoELxEE7-gEwovWprA.png)

&lt;figcaption&gt;Acqusition&lt;/figcaption&gt;

- **획득률**은 신규 사용자가 기존 사용자 대비한 양을 의미한다
- **소스 별 획득**은 신규 사용자 유치를 위한 각 소스 별 마케팅 전략의 효과를 측정한다

## Activation / Adoption (활성화 / 사용)

활성화와 사용 단계가 성공적인지 트래킹하기 위해 우리는 사용자가 프로덕트나 특정 기능과 얼마나 빨리 상호작용을 시작하는지 알려주는 지표가 필요하다. 여기에서는 신규 사용자에만 집중해야 한다(참여(Engagement) 단계와 반대).

이러한 지표들은 우리가 만든 것이 성공할 수 있을지를 파악하는데 많은 도움이 된다. 사람들이 처음 시도해보는 어떤 것을 빠르게 시도해 본다는 것은 그것이 해결하려고 하는 문제에 대해 신경쓰고 있다는 의미인 것이다.

![Activation / Adoption](https://miro.medium.com/max/2400/1*D4MiHQamtSYrnDgem0Q_HQ.png)

&lt;figcaption&gt;Activation / Adoption&lt;/figcaption&gt;

- **활성화 비율**은 가입한 사용자 중 얼마나 많은 사용자가 상호작용을 시작했는지를 측정하고 이를 활성 사용자로 변환해서 측정할 수 있다.  
⚠️ 이 때 우리는 상호작용을 시작한다는 것이 어떤 것인지를 정의해야 한다. 이 경우, 핵심 행동을 처음으로 시작하는 때 혹은 어떤 여러 행동을 연속적으로 수행할 때를 의미한다. 하지만 프로덕트의 성질에 맞게 각자가 정의해야 하는 부분이다.
- **사용률**은 얼마나 많은 사용자가 특정 행동을 하거나 어떤 기능과 상호작용 하는지를 측정한다.
- **최초 사용률**은 얼마나 많은 사용자가 처음으로 특정 행동을 하거나 어떤 기능과 상호작용을 하는지 이해하는 것이다.
- **최초 사용까지 소요된 시간**은 사용자들이 얼마나 빠른 시간 내에 특정 행동을 하거나 어떤 기능과 상호작용을 하는지를 아는 것이다.

## Engagmenet(참여)

참여 단계가 성공적인지 트래킹 하기 위해 우리는 사용자가 프로덕트나 어떤 기능과 얼마나 자주 상호작용 하는지를 알려주는 지표가 필요하다. 이런 지표는 편파적이지 않아야 하고 사용자의 행동에 관한 내용이어야 하며 따라서 믿을 수 있고, 유효해야 한다.

참여 단계에서는 전체를 아우르는 것을 측정하는 것 보다 구체적인 것을 측정하는 것이 필요하다. 또 모든 것을 측정할 수 없으므로, 중요한 것 부터 측정해야 한다. 특정 경험을 선택할 때, 우리는 핵심이 무엇인지를 생각해야 한다. 사용자가 우리 프로덕트를 왜 사용하는지, 그리고 어떤 사용자의 행동이 우리 프로덕트를 사용하는 핵심 행동이라고 할 수 있는지 생각해야 한다. 아마존의 경우 구매 행동이, 에어비엔비의 경우 예약 행동이, 왓츠앱의 경우 메세지를 보내는 행동이 핵심 행동이다.

⭐ 사용자가 핵심 행동에 참여하는것은 비즈니스적으로 매우 중요하기 때문에 대부분의 프로덕트 관리 팀에서 북극성 지표와 연관관계를 찾는다. 사용자가 프로덕트와 더 많이 상호작용 할 수록, 그들이 리텐션될 확률이 높고, 이는 곧 수익을 낼 확률이 더 높은 것으로 이어진다. 모든 게임에서 선행 지표이다. 사용자들이 행동하지 않으면 모든 것이 무너지기 마련이다.

![Engagement](https://miro.medium.com/max/2400/1*nBEsztZCHWXSulgrkBJdWw.png)

&lt;figcaption&gt;Engagement&lt;/figcaption&gt;

- **활성 사용자(Active Users)**는 프로덕트 내에서 얼마나 많은 사용자가 활성 상태였는지를 의미한다.
⚠️ 이 때 우리는 활성 상태가 어떤 것인지를 정의해야 한다. 이 경우, 핵심 행동을 한번 이상 수행한 것을 의미한다. 하지만 프로덕트의 성질에 맞게 각자가 정의해야 하는 부분이다.
- **행동 당 사용자 수(Users per Action)**는 얼마나 많은 사용자가 특정 기능을 사용하거나 특정 행동을 수행하는지를 의미한다.  
ℹ️ 위에서 핵심 행동을 수행한 활성 사용자 수를 활성 사용자라고 가정했기 때문에, 핵심 행동 당 사용자 수는 프로덕트 전체의 활성 사용자 수와 동일할 것이다.
- **사용자 별 행동 수(Actions per User)**와 **행동 간 걸린 시간(Time Between Actions)**은 사용자가 어떤 행동을 얼마나 자주 하는지와 그 사용 행동에 걸리는 시간을 측정하는 것이다.

## Task Success(작업 완료)

작업 혹은 행동이 성공적인지 트래킹 하기 위해, 우리는 사용자가 해당 행동을 하기가 얼마나 용이한지를 알 수 있는 지표가 필요하다. 바로 사용성이다.

![Task Success](https://miro.medium.com/max/2400/1*nZx5_xkUGZpBIe8dITRlUg.png)

&lt;figcaption&gt;Task Success&lt;/figcaption&gt;

- **성공률(Success Rate)**은 의도한 최종 상태에 도달하기까지 걸린 행동의 수를 측정한다. 이를 통해 효과를 측정할 수 있다.
- **행동에 걸린 시간(Time on Action)**과 **낭비(Lostness)**는 행동을 얼마나 빠르게 수행할 수 있는지를 알고, 사용자가 행동을 수행하다 길을 잃었는지에 대해 이해할 수 있다. 이를 통해 효율을 측정할 수 있다.  
⚠️ 사용자가 어떤 행동을 할 때 우리는 그들이 어떤 생각으로 행동하는지 알 수 없기 때문에 이런 지표들의 숫자만으로는 인사이트를 얻기 힘들다. 예를 들어 행동에 걸린 시간이 길었을 때, 사용자는 화장실에 다녀왔거나 전화를 하고 왔을수도 있다. 그럼에도 불구하고 우리는 이 수치들이 갑자기 나빠졌을 때는 문제를 파악해야 할 타이밍임을 알 수 있고, 이 수치들이 좋아졌을 때 개선 사항들이 효과가 있었는지를 알 수 있다.  
💡 좀 더 정확성을 확보하기 위해, 우리가 사용자에게 과제를 제공해 동기를 유도할 수 있는 환경을 만들어볼 수 있다. 이를 통해 우리는 사용자가 어떤 동기로 행동하는지 미리 알 수 있다.

## Happiness(행복감)

사용자들의 행복감을 측정하려면, 우리는 추천(Referral)과 만족도(Satisfaction)을 확인할 수 있다. 추천을 트래킹 하기 위해서는 사용자가 프로덕트를 얼마나 자주 추천하는지 알려주는 지표가 필요하다. 만족도를 측정하기 위해서는 사용자가 얼마나 만족하는지(~~ㅋㅋㅋ~~) 알려주는 지표가 필요하다.

이런 지표들은 측정하기 흥미로우면서도 까다로운 지표이다. 이 지표들은 사용자가 스스로 알릴 수 밖에 없으며, 감정과 편견이 끼어들 수 있다. 하지만 행동 지표와 결합한다면 유의미한 인사이트를 제공할 수 있다.

![Happiness](https://miro.medium.com/max/2400/1*oaz5dRoGflCN7JxIOy1EVg.png)

&lt;figcaption&gt;Happines&lt;/figcaption&gt;

- **추천율(Referral Rate)**은 사용자가 프로덕트를 추천할만큼 만족하는지를 알 수 있다.
⚠️ NPS(순 추천 고객 지수, Net Promoter Score)는 추천율을 측정하는 가장 잘 알려진 지표이다. &quot;친구나 동료에게 이 프로덕트를 추천할 의향이 있습니까? 1-10 중에서 답변해주세요&quot; 라고 물어보는 것인데, 이는 실제 행동을 측정하는게 아니라 의향을 측정하는것이기 때문에 이 지표를 사용하는 사람들은 많지 않다.  
💡 [사용자와 의사소통하는 규칙 중 하나는 그들의 경험에 대해 물어보는 것이다](https://bootcamp.uxdesign.cc/talk-with-your-customer-6e8ff84f98d8). 우리는 NPS 질문 대신에 이렇게 물어볼 수 있다. &quot;최근 2주 간 이 프로덕트를 누군가에게 추천한 적이 있습니까?&quot; 이렇게. 더 나은 방법으로는 사용자에게 누군가에게 추천할 수 있는 아주 쉬운 방법을 제시하고, 얼마나 많은 사람들이 추천 행동을 수행하는지 트래킹 하는 방법이 있다.
- **만족률(Satisfaction Rate)** 및 **만족 점수(Satisfaction Score)**는 얼마나 많은 사용자가 만족스럽다고 표현할 만큼 만족했는지와 대다수 사용자가 만족한 정도를 측정한다.  
⚠️ 만족도를 측정할 때는 맥락을 고려해야 한다. 실험을 진행한 1주 이후에 설문을 수행한다면 사용자들의 인지가 이미 변질되었을 것이기 때문에 사용자들의 답변을 신뢰하기가 어려울 것이다.  
💡 화상 전화 서비스에서 품질에 대한 평가를 제공하는 것 같이 어떤 행동의 마지막 단계에 간단한 평가 시스템을 제공할 수도 있다.

## Retention(리텐션)

리텐션 단계의 성공을 측정하기 위해, 프로덕트나 특정 기능을 사용자가 얼마나 오래 사용하는지에 대한 지표가 필요하다. 이 지표로 우리는 사용자들이 어떤 것을 중시하는지, 왜 사용자들이 떠나는지를 파악할 수 있다. 사용자의 리텐션은 매우 중요하다. 새로운 사용자를 유치하는 것 보다 기존 사용자를 유지시키는 것이 훨씬 더 쉽기 때문이다.

![Retention](https://miro.medium.com/max/2400/1*hmOu2TykzPX1b7FpiRAAoA.png)

&lt;figcaption&gt;Retention&lt;/figcaption&gt;

- **리텐션율(Retention Rate)**은 얼마나 많은 사용자가 계속 프로덕트를 사용하는지를 측정한다.
⚠️ 프로덕트를 사용하는것이 어떤 의미인지 먼저 정의해야 한다. 예를 들어 로그인 하는것, 핵심 행동을 수행하는 것, 구독 상태를 유지하는 것 등이 있다. 하지만 프로덕트의 성질에 맞게 각자가 정의해야 하는 부분이다.
- **사용 시간(Retained Time)**은 사용자가 우리 프로덕트를 얼마나 오래 사용하는지에 대한 시간이다. 우리는 이 시간을 늘리기 위해 노력해야 할 것이다.
- **업그레이드율(Upgrade Rate)**은 프로덕트의 사용 티어가 나뉘어져 있을 때, 사용자가 언제 업그레이드를 결심하는지 그 시기를 파악하는 것이다.

ℹ️ 일부 팀은 리텐션(Retention) 대신에 이탈(Churn)을 측정한다. 최종적인 목표는 같지만 절반이 찬 물잔을 바라보는 관점과도 같다. 나의 경우는 물이 반 차있다고 보는 사람이다.

## Revenue(수익)

수익은 사용자가 얼마나 지불하고 있는지, 혹은 우리 프로덕트로 얼마나 돈을 벌고 있는지를 나타낸다. 따라서 비즈니스가 지속 가능하고 건전한 상태를 유지하면서 기존 고객으로부터 수익을 증대시킬 수 있는 다양한 가격 전략을 테스트 해보는 것이 중요하다.

![Revenue](https://miro.medium.com/max/2400/1*Zwy6eztwuIme5jDQoyhx-w.png)

&lt;figcaption&gt;Revenue&lt;/figcaption&gt;

- **사용자 당 수익(Revenue per User)**이 이것을 측정할 수 있는 방법이다. 이외에도 다른 지표들이 있지만, 비즈니스의 형태에 따라서 달라질 수 있다.

---

프로덕트 지표를 선택하는 것은 방향에 관한 것이 아니라, 여정이다. 프로덕트 지표는 프로덕트와 마찬가지로 반복적으로 변경되어야 한다. 우리는 작은 데이터 셋으로부터 시작해 우리가 측정해야 할 결과에 따라 조정해나가야 한다.

이 같은 프로덕트 지표가 없으면 우리는 결과 지향적일 수 없게 된다. 결과 지향적이지 못한다면, 우리는 진정한 의미에서 애자일할 수 없다. 마지막으로, 우리가 결과 지향적이지 못하고 애자일 하지 않는다면, 우리는 우리 프로덕트를 효율적이고 현대적인 방식으로 관리할 수 없게 된다.

프로덕트 관리는 프로덕트 지표가 들어오면서 영원히 바뀌어버렸고, 다시 돌아갈 방법은 없다.

![Product Management ♥️ Product Metrics](https://miro.medium.com/max/1648/1*yGcKezcxzPa4j7b4xb6rgA.png)

&lt;figcaption&gt;Product Management ♥️ Product Metrics&lt;/figcaption&gt;

---

긴 글을 여기까지 읽어줘서 고맙습니다. 만약 이 글이 좋았다면, 다음 (Cláudia Delgado의!) 글들도 읽어볼 만 할겁니다. 이 글보단 더 짧으니까 읽어보세요! 👉

[How to Navigate the Abstract World of Outcomes](https://medium.com/swlh/how-to-navigate-the-abstract-world-of-outcomes-58a81cdbab95)

[Learn to Earn: An Experimentation Guide](https://bootcamp.uxdesign.cc/learn-to-earn-an-experimentation-guide-94d4b07f2640)</description>
          <pubDate>Mon, 28 Jun 2021 02:39:45 +0900</pubDate>
          <link>http://localhost:4000/blog/article_summary-6/</link>
          <guid isPermaLink="true">http://localhost:4000/blog/article_summary-6/</guid>
        </item>
        
    
        
        <item>
          <title>프로덕트를 사용자 친화적으로 만드는 것은 무엇일까?</title>
          <description>&lt;p class=&quot;text-gray&quot;&gt;
🔗 이 글은 Robert Turner가 본인의 &lt;a href=&apos;https://trtphd.medium.com/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink1&apos; onclick=&apos;clickedOutlink(outlink1)&apos;&gt;&lt;img src=&apos;https://medium.com/favicon.ico&apos; style=&apos;display:inline; height: 1em; position: relative; bottom: -2px;&apos;&gt;미디엄 블로그&lt;/a&gt;에 올린 &lt;a href=&apos;https://abit.ly/article_36&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink2&apos; onclick=&apos;clickedOutlink(outlink2)&apos;&gt;아티클&lt;/a&gt;을 번역, 요약한 글입니다.
&lt;/p&gt;

## ⚡️ 요약
&gt; 사용성을 정량적으로 평가하려고 하면 큰 결함이나 딜 브레이커가 되는 핵심 이유를 알려주긴 하지만, 정성적인 조사 방법으로는 제품 사용성에 대한 정성적인 지표로서 역할은 하지만 개선에 대한 방향은 알기 어렵다. 제품 개발자들에게 사용성에 대한 유의미한 인사이트를 위해서는 추가적인 컨텍스트가 필요하다.

&gt; 사용성을 구성하는 5가지 차원은 다음과 같다.  
    - **학습 용이성**  
    - **효율성**  
    - **기억 용이성**  
    - **오류 대처**  
    - **만족도**

&gt; 디자인 휴리스틱(직관적 발견법)으로는 유명한 닐슨의 10가지 기준이 있다.
    1. **시스템 상태의 가시성**  
    2. **시스템과 실제 세계의 일치**  
    3. **사용자 통제감과 자유도**  
    4. **일관성과 표준화**  
    5. **오류 방지**  
    6. **회상보다는 인지**  
    7. **사용 유연성과 효율성**  
    8. **미적이며 미니멀한 디자인**  
    9. **사용자가 오류를 인지하고, 진단하고, 복구할 수 있도록 지원**  
    10. **도움말과 문서화**

&gt; 제품 사용성을 위해서는 &apos;사용성을 구성하는 5가지 각 차원에 대해 10가지 디자인 휴리스틱이 잘 지켜지는지&apos;를 제품 개발 초기 디자인부터 신경 쓰고, 자주 평가해야 한다.  
평가는 정량적, 정성적인 방법을 모두 사용해 각 방법의 장단점을 취합해야 한다.  
연구 결과에 대해서는 핵심 내용과 제안사항, 액션 아이템을 정리하는 것을 프로세스 화 하여 리서치 결과가 유의미하게 남을 수 있도록 해야 한다.

---

## Intro

우리는 소비자로서 우리가 구매하려는 제품(예를 들어 자동차, 가전제품, 모바일 디바이스, 앱 등)이 궁극적으로 우리를 위해 어떻게 동작할지에 대한 기본적인 기대를 빠르고 명확하게 형성합니다. 보통 브랜드 평판, 고객 리뷰, 제품 데모 등 &quot;유사 상호작용&quot;을 통해 얻은 데이터를 기반으로 하는 기대는 우리의 쇼핑 행태부터 최종적인 구매 결정에까지 모든 것에 영향을 줍니다. 이러한 기대 중 가장 중요한 것은 그 제품이 어떤 것인지 충분히 알기 쉽고, 사용하기에 번거롭지 않다는 것입니다.

우리가 새로운 제품 사용을 시작하면, 그 디자인에 내재한 어떤 특징이 우리가 제품과 제조업체 모두에 대한 태도를 형성할 뿐만 아니라 제품을 계속 사용하는 정도나 방식을 결정합니다. 우리는 모두 직관적이지 않거나 반 직관적인 제품을 경험해봤고 이에 대해 비난한 적이 있을 것입니다. 하지만 제품을 사용하고 실제로 사용자 친화적으로 만드는 근본적인 특성에 대한 피드백(제품 개발자들에게는 필수적인 정보)을 표현하는 것은 조금 더 복잡합니다. 사용성 피드백과 제품 평가는 종종 &apos;딜 브레이커&apos;의 핵심 이유나 사용성의 큰 결함에 대한 개별 증상을 밝혀준다. 반대로, 전체적인 사용성 평가(예를 들어, &apos;이 제품의 사용성에 대해 전반적으로 얼마나 만족하셨습니까?&apos;와 같은 질문)는 제품의 전반적인 사용성에 대한 훌륭한 정성적인 지표를 제공하지만 섬세하게 진단하기엔 정보를 거의 제공하지 않습니다. 그 말인즉슨, 어떤 사람은 제품이 사용자 친화적이지 않다고 생각은 하지만, 그 이유나 어떻게 개선할 수 있는지는 전혀 모른다는 의미입니다. 검증되고 표준화된 평가 도구일지라도 개발자들에게 사용성에 대한 유의미한 인사이트를 제공하기 위해서는 추가적인 컨텍스트가 필요합니다.

## 다차원 구조인 사용성

우리는 일반적으로 제품의 사용성이 절대적인 지표라고 생각하지 않습니다. 어떤 제품도 100% 친화적이거나 100% 친화적이지 않습니다. 오히려 대부분의 제품은 사용성 스펙트럼에서 대체로 중-저 구간인 &quot;meh&quot; 정도에 위치한다. 이것은 사용성이 정량적으로 평가가 가능하고 측정가능하지만 1차원적인 구조가 아니기 때문입니다. 따라서 우리는 사용성을 하나로 취급하거나 측정해서는 안 됩니다. 연구진들은 사용성이 서로 다르지만 연관된 5가지 요소로 구성되어있다고 결론 내렸습니다.

- **학습 용이성**: 사용자가 처음 제품을 사용할 때 기본적인 태스크(예: 보안 설정 변경하기)를 얼마나 쉽게 성공적으로 수행할 수 있는가?
- **효율성**: 사용자가 제품이 어떻게 동작하는지 학습한 다음, 일상적인 작업을 얼마나 빠르게 수행할 수 있는가?
- **기억 용이성**: 사용자가 제품을 사용하지 않다가 다시 돌아왔을 때 이전에 멈췄던 부분으로 쉽게 돌아올 수 있는가? 중단이나 일시적인 방해로 사용자가 처음부터 다시 시작해야 하는가?
- **오류 대처**: 사용자가 얼마나 자주 실수를 하고, 그 실수는 얼마나 심각하고, 사용자가 얼마나 쉽게 그 실수를 정정하거나 복구할 수 있는가?
- **만족도**: 사용자에게 제품이 전반적으로 얼마나 매력적이고 즐거움을 주는가?

이러한 요소들은 초기에 그리고 자주 고려되어야 하며, 과학적 자료와 표준에 맞게 제품에 의도적으로 디자인 되어야 하고, 효과를 보장하기 위해 제품 개발 전반에 걸쳐 엄격하게 테스트 되어야 합니다. 즉, 이러한 중요한 요인 중 하나를 무시하면 부적절한 제품 사용성이 초래됩니다. 만약 여러 요소를 무시한다면 제품 사용성은 더욱 악화할 것입니다. 반복적인 디자인 접근 방법으로 테스트를 일상적으로 수행하는 것이 최종 디자인에 들어가 결정돼버리기 전에 사용성 결함을 식별하고 수정할 수 있는 핵심 방법입니다.

## 디자인 휴리스틱 (직관적 발견법)

만약 인간과 시스템의 상호 작용에 대한 역학관계를 특정하는 과학적인 자료가 사람과 시스템의 인터페이스를 설계하고 검증하기 위한 진정한 &quot;사용자 매뉴얼&quot;을 구성한다면, Jakob Nielsen이 1994년에 발표한 디자인 휴리스틱은 시행착오를 거친 믿을만한 &quot;퀵 가이드&quot;를 대표합니다. 닐슨의 연구는 제품 개발자가 유저 인터페이스를 디자인할 때 고려해야 할 10가지 중요한 규칙으로 요약됩니다.

1. **시스템 상태의 가시성**: 시스템은 사용자와 의사소통 하여 현재 시스템이 어떤 모드, 상황, 상태인지 계속해서 알려주어야 합니다. 눈에 띄는 지연이나 버벅임 없이 사용자의 인풋과 명령을 확인하고 이에 응답해야 합니다.

2. **시스템과 실제 세계의 일치**: 시스템은 사용자가 친숙하게 생각하는 단어, 표현, 개념으로 대화해야 합니다. 실재하는 규칙을 적용하고, 실제 세계에서 나타나는 대로 일관된 방식으로 디지털 정보와 표현을 표시해야 합니다.

3. **사용자 통제감과 자유도**: 사용자는 종종 의도하지 않은 기능이나 옵션을 선택하곤 하며, 이런 원하지 않는 시스템 상태에서 긴 다이얼로그나 프로세스 없이 즉각 &quot;비상 탈출&quot;할 수 있는 명확한 표시가 필요합니다. 되돌리기와 다시 실행을 지원해야 합니다.

4. **일관성과 표준화**: 사용자는 인터페이스에 나타나는 다른 단어, 코드, 상황이나 액션이 동일한 의미인지 궁금해할 필요가 없어야 합니다. 적절한 네이밍 규칙을 정하고 준수해야 합니다.

5. **오류 방지**: 어떤 좋은 에러 경고나 메세지보다도 에러가 나지 않도록 하는 디자인이 더 사려 깊은 디자인입니다. 에러를 발생시키기 쉬운 조건을 제거하거나 사용자가 액션을 수행하기 전에 직접 확인할 수 있는 옵션을 제공해야 합니다.

6. **회상보다는 인지**: 오브젝트, 액션, 워크플로우를 잘 보이게 표시하여 사용자가 기억에 의존할 필요 없이도 다음 단계가 무엇인지 인지할 수 있도록 해야 합니다. 사용자들은 인터페이스의 한 부분에서 다른 부분으로 이동할 때나, 트레이닝이나 문서에서 뭔가를 기억할 필요가 없습니다. 핵심적인 정보(지침, 주의, 경고와 알림을 포함)는 확인될 때까지 표시되어야 하며 적절할 때마다 쉽게 찾을 수 있어야 합니다.

7. **사용 유연성과 효율성**: 초보 사용자가 확인할 수 없는 단축키와 같은 가속 장치를 통해 숙련된 사용자의 인터랙션 속도를 높일 수 있어 시스템이 숙련 사용자와 비숙련 사용자 모두를 만족시킬 수 있습니다. 하지만, 이런 가속 장치가 모든 사용자에게 항시적으로 제공되는 경우 인터페이스를 복잡하게 하고 성능이 저하될 수 있습니다.

8. **미적이며 미니멀한 디자인**: 인터페이스에는 연관 없거나 거의 불필요한 정보는 포함되어서는 안 됩니다. 모든 부차적인 정보들은 유의미한 정보와 경쟁하게 되어 가시성을 저해합니다.

9.  **사용자가 오류를 인지하고, 진단하고, 복구할 수 있도록 지원**: 오류 메세지는 일반적인 언어로 표현되어야 합니다 (코드나 사용자에게 익숙하지 않은 용어를 사용하지 않고).  문제의 성격을 명확하게 설명하고 건설적인 해결책에 관해 설명해야 합니다.

10. **도움말과 문서화**: 이런 것들 없이도 시스템을 사용할 수 있는 것이 더 바람직하지만, 온보딩 지원이나 문서를 제공할 필요가 있을 수 있습니다. 이런 정보들은 찾기 쉽고 이동하기 쉬워야 하며, 사용자의 작업에 초점을 맞춰 수행할 단계들을 명확하게 제시해야 하며, 지나치게 방대해서는 안 됩니다.

## 그래서... 제품을 사용자 친화적으로 만드는 것은 (요약)

1. **사용성을 염두에 두고 디자인하라.** 사용성은 이분법적이지 않고 다차원적이고 역동적인 구조로 되어 있다는 것을 인지해야 합니다. 전략적인 관점에서, 핵심 사용성 차원(학습 용이성, 효율성, 기억 용이성, 오류 대처, 만족도)에 주의를 기울여 제품 디자인의 처음부터 신중하게 통합되도록 해야 합니다. 전술적으로는 앞서 설명했던 각 차원에 대해 사용성 휴리스틱(오류 방지, 회상보단 인지 등)을 끌어올려 점진적으로 그리고 장기적으로 성공할 수 있도록 하세요. 자주 평가하고 필요에 따라 조정하세요.

2. **사용성을 염두에 두고 평가하라.** &quot;사용성 측면에서 이 제품에 전반적으로 얼마나 만족하셨나요?&quot;나 이와 같은 질문만으로 제품의 사용성을 판단하면 안 됩니다. 각 핵심 차원에서 제품이 얼마나 잘하고 있는지를 평가해 만약 부족한 부분이 발견된다면 해당 문제에 날카롭게 다듬을 수 있도록 하세요. 수많은 표준화되고 검증된 평가 방법(예: 시스템 사용성 척도 System Usability Scale, 사용자 인터페이스 만족도 설문 Questionnaire for User Interface Satisfaction, IBM 사후 시나리오 및 연구 후 시스템 사용성 질문 IBM After-Scenario and Post-Study System Usability Questionnaires 등)이 있습니다. 내가 뭘, 그리고 왜 하고 있는지 정확히 알지 못한다면 바퀴를 재발명하고 있을 필요가 없습니다.

3. **표준화된 사용성 질문을 넘어서라.** 위에서 언급된 표준화된 기법들은 제품 사용성 전반 평가에 상당한 개선 진단을 제공할 수 있지만, 디자이너나 개발자가 실행 가능한 컨텍스트를 제공하는 데는 여전히 부족합니다. 만약 이런 기법들이 디지털로 이루어진다면, 낮게 평가된 부분의 원인에 대해 더 잘 이해하기 위해 하나 이상의 개방형 후속 질문(예: 설문 조사 플랫폼의 질문 로직 기능을 이용하는 등)을 활용하세요. 만약 기법을 직접 수행한다면, 참가자들의 답변을 함께 검토하거나 연구 내용을 알려주는 동안 낮은 평가를 받은 항목에 대해 임시 인터뷰를 빠르게 진행할 수 있도록 계획하세요.

4. **피드백을 디자이너나 개발자가 사용할 수 있도록 정제하라.** 데이터 분석은 부담스럽고, 압도되고, 시간이 많이 소요될 수 있습니다. 의도한 대상에게 전달할 땐 항상 로우 데이터에서 핵심 정보, 피드백, 테마, 트렌드, 포인트와 제안사항을 뽑아 관리 가능한 수의 명확한 작업 아이템으로 간결하게 패키지화하세요. 이를 통해 중요한 리서치 결과가 무시되거나 사라질 가능성을 크게 줄일 수 있지만, 이 규칙은 사용성 엔지니어링 작업에서 가장 간과되고 지켜지지 않는 요소 중 하나입니다.</description>
          <pubDate>Thu, 21 Jan 2021 21:20:45 +0900</pubDate>
          <link>http://localhost:4000/blog/article_summary-5/</link>
          <guid isPermaLink="true">http://localhost:4000/blog/article_summary-5/</guid>
        </item>
        
    
        
        <item>
          <title>모든 프로덕트는 북극성 지표가 필요하다. 우리 북극성 지표는 어떻게 찾을까?</title>
          <description>&lt;p class=&quot;text-gray&quot;&gt;
🔗 이 글은 Sandhya Hegde가 &lt;a href=&apos;https://amplitude.com/blog/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink1&apos; onclick=&apos;clickedOutlink(outlink1)&apos;&gt;&lt;img src=&apos;https://blog.amplitude.com/wp-content/uploads/2020/10/favicon-big.png&apos; style=&apos;display:inline; height: 1em; position: relative; bottom: -2px;&apos;&gt; Amplitude Blog&lt;/a&gt;에 올린 &lt;a href=&apos;https://abit.ly/article_25&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink2&apos; onclick=&apos;clickedOutlink(outlink2)&apos;&gt;아티클&lt;/a&gt;을 번역, 요약한 글입니다.
&lt;/p&gt;

### ⚡️요약

&gt; - 북극성 지표는 프로덕트 팀이 목표로하는 고객의 문제와 비즈니스가 목표로하는 수익을 연결한다  
- 북극성 지표는 회사 내 조직들의 목표와 전략을 하나로 일치시키는 역할을 한다  
- 북극성 지표는 고객의 가치를 대변하는 `프로덕트의 비전` 과 고객의 가치를 측정할 수 있는 `프로덕트 전략에 대한 선행 지표` 로 나뉜다  
- 북극성 지표는 트리로 만들 수 있는데,  
  1. 북극성 지표를 `넓이, 깊이, 빈도, 효율성` 4가지 차원으로 구성하고  
  2. 각각의 차원을 개선할 수 있는 KPI를 설정하고  
  3. 각 KPI를 만족할 수 있는 전략을 구성하여 만들 수 있다  
- 또 각 회사는 `Attention`, `Transaction`, `Productivity` 게임 중 하나에서 플레이하는데, 각 게임 종류와 프로덕트의 비즈니스 구조에 따라 가져야 할 북극성 지표를 어느정도 방향을 잡을 수 있다

### Intro

프로덕트 북극성 지표는 오늘날 가장 강력하면서 사람들이 잘못 이해하고 있는 프로덕트 전략 프레임워크이다. 많은 프로덕트 팀이 북극성 지표를 수립하지 않거나 잘못 수립해 의도하지 않은 결과를 맞이하고 있다.

이 아티클은 북극성 지표에 대해 파고드는 시리즈 중 첫 번째다. 이 아티클이 프로덕트 리드와 매니저에게 이 지표가 왜 중요한지, 어떻게 정의하고 프로덕트 전략과 성장을 위해 어떻게 사용하는지 가이드가 되길 바란다. 이 아티클에서 다음에 대해 이야기한다:

- [⚡️요약](#️요약)
- [Intro](#intro)
- [북극성 지표는 무엇이며 왜 중요한가?](#북극성-지표는-무엇이며-왜-중요한가)
- [질문 1: 좋은 북극성 지표의 좋은 예](#질문-1-좋은-북극성-지표의-좋은-예)
- [질문 2: 회사에서 북극성 지표는 하나만 가져야 하는가?](#질문-2-회사에서-북극성-지표는-하나만-가져야-하는가)
- [질문 3: 좋은 북극성 지표를 선택하는 방법](#질문-3-좋은-북극성-지표를-선택하는-방법)
- [프로덕트 전략 운영에 북극성 지표를 사용하는 방법](#프로덕트-전략-운영에-북극성-지표를-사용하는-방법)

&lt;div class=&quot;c-list&quot;&gt;
    &lt;div class=&quot;c-list__item&quot; style=&quot;border: 1px solid rgba(0, 0, 0, 0.08); border-radius: 3px;&quot;&gt;
        &lt;a href=&quot;https://amplitude.com/north-star?utm_source=blog&amp;utm_medium=onsite&amp;utm_campaign=download-north-star-playbook&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; id=&apos;outlink3&apos; onclick=&apos;clickedOutlink(outlink3)&apos;&gt;
            &lt;div class=&quot;c-list__info&quot;&gt;
                &lt;div class=&quot;c-list__type&quot;&gt;
                ⭐️ The North Star Playbook
                &lt;/div&gt;
                &lt;div class=&quot;c-list__sub&quot;&gt;
                📕 Playbook PDF 다운로드 &gt;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;c-list__body&quot;&gt;
                The North Star Playbook은 북극성 지표를 발견할 수 있도록 더 디테일한 가이드를 제공하고 있다
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;

### 북극성 지표는 무엇이며 왜 중요한가?

북극성 지표는 프로덕트 팀의 성공을 측정하는 지표이다. 북극성 지표는 프로덕트 팀이 풀고자 하는 고객의 문제와 비즈니스가 목표로하는 수익의 관계를 정의한다.

![Relationship between Vision and Revenue](https://images.ctfassets.net/vrkkgjbn4fsk/oUxh6lTfLa28sEKyAUSuo/b233ce2534db23544414c48ff0956cc3/what-is-north-star-metric.png?q=90&amp;w=1168)

따라서 어떤 회사든 세 가지 중요한 목적을 가진다.

- 프로덕트 팀이 어떤 것에 최적화 하거나 무엇을 트레이드 오프할 지 **명확하게(clarity)**하고 조직 내에서 **일치(alignment)**시킨다
- 프로덕트 조직의 **임팩트**와 **진행 과정**을 회사의 다른 조직에 전달하여 프로덕트 전략 계획을 가속하고 더 많은 지원을 받을 수 있도록 한다
- 가장 중요한 것은, **프로덕트의 결과에 대해 책임**을 질 수 있다는 것이다

많은 회사에서 프로덕트 팀은 비즈니스에서 얼마나 임팩트를 주고 있냐가 아닌, 그들이 얼마나 결과물을 전달하는지에 따라 평가받는다. 프로덕트에 임팩트 중심적인 문화가 없다면, 당신은 비즈니스의 운명에 영향을 줄 수 없다. 즉 북극성 지표가 없다면, [프로덕트 중심 회사](https://amplitude.com/blog/2017/10/04/thrive-product-led-era)가 될 수 없다는 말이다.

&gt; 책임 없이는 리더십도 없다

다음은 프로덕트 전략이나 실행에 책임이 있는 사람이 프로덕트 북극성 지표에 대해 대답해야 할 세 질문이다.

### 질문 1: 좋은 북극성 지표의 좋은 예

북극성 지표는 두 가지 파트로 나뉘어져 있다.

1. 프로덕트의 비전에 대한 정의
2. 현재 프로덕트 전략을 측정할 수 있는 주요 지표

![Amplitude&apos;s Product North Star](https://images.ctfassets.net/vrkkgjbn4fsk/32oOmrJcmkUoQA8goGK2CW/8201f0905344fe35ee353eb8217dfcce/amplitude-b2b-north-star-metric-example-1024x401.png?q=90&amp;w=2336)

&lt;figcaption&gt;Amplitude의 현재 프로덕트 북극성 지표&lt;/figcaption&gt;

우리가 끌어내고 싶은 고객 가치는 `&quot;무엇이 행동을 이끌어 내는지 더 쉽게 답변하고, 더 나은 고객 경험을 제공하는 것&quot;`이다.

우리는 현재 빠른 성장 단계에 있기 때문에, 우리의 Weekly Quering Users (WQUs) 지표 - 예를 들어 최소 주 1회 이상 데이터를 조회한 고객 수 - 는 &apos;넓이(breadth)&apos;를 반영한다. 이 지표는 시간이 지남에 따라 사용자가 다시 방문하게 하고(Retain) 사용자를 확장할 수 있는 선행 지표이다.

#### 좋은 북극성 지표는 가치와 일치한다 &lt;!-- omit in toc --&gt;  

당신의 북극성 지표는 **고객이 인지하는 가치**를 제공하는 행동이 무엇인지에 대한 이해로부터 나와야 한다. 임팩트에 가장 가까워질 수 있도록 해야 한다. 이것은 &quot;일간 활성 사용자 수 (Daily Active USers, DAU)&quot;나 &quot;등록 사용자 수 (Registered Users)&quot;가 좋은 KPI가 아니라는 뜻이다. 만약 이 지표가 프로덕트의 KPI라면 팀에 명확성을 제공할 큰 기회를 날리고 있는 것이다.

팀이 고객 가치를 북극성 지표와 연결하지 못한다면, 비즈니스를 잘못된 길로 이끌게될 수 있다.

---

#### LinkedIn의 북극성 지표 예시 &lt;!-- omit in toc --&gt;  

LinkedIn의 데이터 사이언티스트는 [&quot;추천 (endorsements)&quot; 기능](https://blog.linkedin.com/2012/09/24/introducing-endorsements-give-kudos-with-just-one-click)에 대한 그들의 북극성 지표를 개선하는 것이 더 나은 프로덕트 경험을 제공하지 **않았다는** [멋진 케이스 스터디](http://papers.www2017.com.au.s3-website-ap-southeast-2.amazonaws.com/companion/p617.pdf)를 공유하였다. 그들의 지표 정의는 추천이 만들어지고/받아들여진 액션에 관한 것 이었고, 채용 담당자는 이러한 지지가 잘못된 정보를 제공하고 있을지 우려한다는 고객이 인지하는 가치를 대변하지 못해 LinkedIn의 비즈니스를 실제로 개선하지 못했다.

Reforge 또한 최근 프로덕트 지표를 제대로 설정하지 않았을 경우 [일반적으로 발생하는 위험](https://www.reforge.com/blog/north-star-metric-growth)에 대한 훌륭한 아티클을 개제하였다.

---

#### 좋은 북극성 지표는 성공에 대한 선행 지표이다 &lt;!-- omit in toc --&gt;  

&gt; 프로덕트 북극성 지표는 프로덕트와 고객 가치가 무엇인지에 대해 상세해야 한다

이 지표의 중요한 부분은 미래 성공에 대한 선행 지표가 되어야 한다는 것이다. 월간 매출이나 ARPU(사용자 별 평균 매출, Average Revenue Per User)와 같은 후행 지표는 프로덕트 임팩트의 신호를 빠르게 줄 수 없다. 이러한 지표는 미래 수익에 대한 예측을 제공하는 것이 아니라 과거에 발생한 일에 대해 말해줄 뿐이다. 미래에 발생할 수익과 시장 가치가 더 늘어나도록 지표를 가져갈 수 있다면, 임팩트 또한 더 많이 가져갈 수 있다.

---

#### eCommerce 산업의 북극성 지표 예시 &lt;!-- omit in toc --&gt;  

Amplitude의 고객 중 하나인 Fourtune 100 리테일러는 회사의 미래에 모바일 커머스 비즈니스가 전략적으로 우선순위가 높다는 것을 발견해 이를 성장시키려고 하고 있다.

그 팀의 북극성 지표는 아마 &lt;span style=&quot;color: #4139EF;&quot;&gt;**&quot;모바일 주문이 배송 완료된 수&quot;** &lt;/span&gt;일 것이다. 이 지표는 배송이 지불, 물류 문제, 반송 문제 없이 완료 되었다는 것이기 때문에 그들의 모바일 앱에서 주문하는 사람을 포착하고 (현재 전략이 집중하는 바), 좋은 경험을 한 사람(가치를 얻는 고객)을 포착한다.

---

프로덕트의 세계에서, 이것은 종종 &quot;고객의 아하 모먼트&quot;를 찾는 것으로 비유되곤 한다. 고객이 다시 돌아오는(리텐션) 초기 행동을 찾을 수 있다면, 강한 선행 지표가 되는 효과적인 북극성 지표를 가지게 되는 것이다.

&gt; 북극성 지표는 미래 비즈니스 결과에 대한 선행 지표여야 한다

#### Facebook 북극성 지표 예시 &lt;!-- omit in toc --&gt;  

최근 Facebook은 &quot;첫 10일 동안 7명의 친구를 등록한 사용자 수&quot;를 주요 지표로 선정하고 있다는 것이 잘 알려져 있다. 이러한 주요 액션을 어떻게 발견하는지 궁금하다면 [다음 가이드 👉](https://help.amplitude.com/hc/en-us/articles/115001526027-How-to-Use-Compass-to-Find-Your-Company-s-Inflection-Metrics)를 확인해볼 수 있다.

---

#### B2B의 북극성 지표 예시 &lt;!-- omit in toc --&gt;  

만약 SaaS 회사가 Dropbox나 Hubspot과 같은 셀프 서브 비즈니스 모델을 가지고 있다면, 그들의 지표는 아마 &quot;첫 주에 활성 사용자가 3명인 트라이얼 계정&quot; 일 수 있다. 이 지표는 가치를 발견하고 있는 모든 신규 무료 계정을 포착하고, 트라이얼 전환과 구독으로 인한 매출이 발생할 것이라는 프로덕트 팀이 예측하고 활성화 할 수 있는 신호를 제공해준다.

Docusign의 전 프로덕트 리더이자 Social Capital의 파트너인 Ashley Carroll은 자신의 웨비나에서 더 나은 프로덕트를 만드는데 &lt;span style=&quot;color: #4139EF;&quot;&gt;**&quot;non-revenue&quot; 프로덕트 북극성 지표**&lt;/span&gt;의 중요성을 이야기했다.

비슷하게, Instacart와 같이 빠르게 성장하는 회사들은 그들 프로덕트 북극성 지표를 종종 &quot;주 별 첫 주문을 완료하는 사용자&quot;와 같은 &lt;span style=&quot;color: #4139EF;&quot;&gt;**새로운 사용자 활성화(New user activation)**&lt;/span&gt; 지표에 집중하기도 한다. 한 번 활성화 된 사용자가 유지된다는 것을 알기 때문에, 회사가 미래 수익에 대한 선행 지표에 집중할 수 있도록 해준다.

---

#### 요약하자면, 좋은 북극성 지표는 다음 세 가지 특징을 가진다: &lt;!-- omit in toc --&gt;  

![Three Good North Star Metric Attributes](https://images.ctfassets.net/vrkkgjbn4fsk/6xuFgiHMhq0sK0cGyKikWe/f88f0774f052ced056cea9494d7a79cc/attributes-good-north-star-metric.png?q=90&amp;w=2336)

&lt;figcaption&gt;Three Good North Star Metric Attributes&lt;/figcaption&gt;

1. 고객이 당신의 프로덕트에서 가치를 발견하는 순간을 측정한다
2. 현재 프로덕트 전략의 핵심을 대변한다
3. 회사가 중요하게 여기는 미래 비즈니스 결과물에 대한 선행(후행이 아닌) 지표이다

### 질문 2: 회사에서 북극성 지표는 하나만 가져야 하는가?

꼭 그런것은 아니다. &quot;하나의 핵심 지표&quot;라는 생각은 비즈니스 저변에서 커뮤니케이션을 단순화하는데 용이하지만 보통 충분하지 않다. 보통 규모가 큰 회사들은 복잡한 생태계를 가지고 있고 1-3개의 핵심 프로덕트 지표에서 최적의 균형을 찾기 위해 노력한다. 핵심 지표가 하나라면 무엇이 더 중요한지 알 수 없고, 중요한 트레이드 오프를 눈치채지 못할 수 있다.

거기에 더해, 지표는 각 프로덕트 팀의 목표와 지표를 도출하는데도 사용된다. 모든 팀은 프로덕트 조직의 북극성 지표를 발전시키는 그들만의 구체적인 목표를 만들어야 한다.

&gt; 북극성 없는 KPI들은 그냥 지표 국밥이 되기 마련이다

예를 들어, Amplitude에서 우리의 프로덕트 북극성 지표는 주 별 Amplitude에서 한 번 이상 쿼리를 치는 사용자의 수이다. 우리는 이것을 주별 쿼리하는 사용자(Weekly Querying Users, WQUs) 라고 부른다. 거기에 더해, 우리는 이전에 백엔드 엔지니어링 팀이 가지고 있던 인프라의 퍼포먼스에 대한 지표도 가지고 있다.

모든 북극성 지표는 &lt;span style=&quot;color: #4139EF;&quot;&gt;**4가지 차원**&lt;/span&gt; -  &lt;span style=&quot;color: #4139EF;&quot;&gt;**넓이, 깊이, 빈도, 효율성**&lt;/span&gt; - 으로 쪼갤 수 있다. Amplitude의 핵심 지표는, 이 중 세 가지 차원을 높은 우선순위를 부여해 프로덕트 팀이 발전하는 데 쓰고 있다.

아래는 식료품 주문과 배달 앱에 대한 북극성 지표 트리 예시이다. 트리는 12개의 프로덕트 개선 계획을 북극성 지표의 각의 차원을 발전시킬 수 있는 하나의 프레임워크로 묶은 것이다.

![Example of 4 North Star Metric Dimensions for Grocery Delivery App](https://images.ctfassets.net/vrkkgjbn4fsk/1mEKe0EY6QIWICyokeiu2g/a4328e19435979a92118585463160bcd/north-star-metric-tree.png?q=90&amp;w=2336)

&lt;figcaption&gt;Example of 4 North Star Metric Dimensions for Grocery Delivery App&lt;/figcaption&gt;

### 질문 3: 좋은 북극성 지표를 선택하는 방법

이 아티클이 그 방법을 배우기에 딱 알맞은 곳입니다! 조직과 프로덕트 분야에 적합한 북극성 지표를 선택하는 데 가장 중요한 것은 당신이 어떤 게임을 하고 있는지 아는 것이다.이 게임은 핵심 고객 관여 모델에 대한 것이다. 11,000개가 넘는 회사와 3조가 넘는 사용자 액션을 분석한 결과, 모든 디지털 제품은 다음 세 종류 중 하나에 대한 게임을 하고 있다는 것을 알게 되었다.

1. &lt;span style=&quot;color: #4139EF;&quot;&gt;**관심 게임(Attention)**&lt;/span&gt; : 프로덕트가 사용자의 시간을 얼마나 가져갈 수 있는가
2. &lt;span style=&quot;color: #4139EF;&quot;&gt;**트랜잭션 게임(Transaction)**&lt;/span&gt; : 플랫폼 안에서 사용자가 상업적 트랜잭션을 얼마나 만드는가
3. &lt;span style=&quot;color: #4139EF;&quot;&gt;**생산성 게임(Productivity)**&lt;/span&gt; : 프로덕트 내에서 사용자가 얼마나 고가치 디지털 업무를 수행할 수 있는가

![The 3 Games in Product](https://images.ctfassets.net/vrkkgjbn4fsk/46J74JVEBqSgEkQ0SeGKO0/baaf247a501c6a1cf74e1becd82cb92e/product-engagement-game.png?q=90&amp;w=2336)

&lt;figcaption&gt;The 3 Games in Product&lt;/figcaption&gt;

![Hypothetical North Star Example for each Game](https://images.ctfassets.net/vrkkgjbn4fsk/58AQcYMZfimWsQmK8QMyAe/c8740feb5c15f050c6e0623e725f6106/examples-hypothetical-north-star-metric.png?q=90&amp;w=2336)

&lt;figcaption&gt;Hypothetical North Star Example for each Game&lt;/figcaption&gt;

**Facebook**과 **Netflix**는 둘 다 관심 게임을 하고 있지만, 비즈니스 모델은 근본에서 부터 다르다. Facebook의 수익은 광고 수익을 창출하기 위한 피드 관여도와 비례한다.

반면 Netflix는 구독 모델을 가지고 있고 콘텐츠의 양이 정해져 있다(점점 많아지고 있지만). 이는 그들의 북극성 지표는 콘텐츠를 시청하는 시간이 아니라 구독자들의 수를 극대화 하는데 있어야 한다는 것을 의미한다.

유사하게 **Amazon Retail**과 **Walmart**는 동일한 트랜잭션 게임을 수행하지만 다른 북극성 지표를 가질 수 있다. Amazon은 그들의 구독 모델이 충성도와 LTV에 대한 가시성을 제공하기 때문에 아마존 프라임 구독자들의 수와 그들이 만들어 내는 가치를 최적화 하는데 있을 것이다. Walmart는 반대로 비용 우위를 가지기 때문에 고객이 방문할 때 마다 고객의 지갑 점유율에 집중할 것이다.

**Salesforce**는 B2B 회사들에게 고객 정보에 대한 Source of Truth 중심지 역할을 하고자 한다. 그들의 새로운 전략은 세일즈 시 의사결정을 위한 AI 와 관련되어 있다. 이것은 그들의 북극성 지표는 사용자 확보 보다는 그들 계정에 고객 데이터가 얼마나 저장되는가에 더 집중하고 있다는 것을 의미한다. 이런 모델과는 다르게, **Adobe Creative Cloud**는 개별 구독자와 그들이 구독을 유지하도록 충분한 인게이지먼트를 제공하는 것에 집중할 것이다.

### 프로덕트 전략 운영에 북극성 지표를 사용하는 방법

프로덕트 전략을 수행하는데 북극성 지표 프레임워크를 사용하는 것은 임팩트 중심 조직에게 필수적인 투자이다. 또 이것은 프로덕트 주도형 기업으로 가는 길이다.

![Product-led Company using the North Star Metric](https://images.ctfassets.net/vrkkgjbn4fsk/3hNgILdWYE2cYOkoEgI4My/22b0d5da4ac88610f3d8eff8450516d7/product-initiatives-north-star-metric-revenue.png?q=90&amp;w=2336)

&lt;figcaption&gt;Product-led Company using the North Star Metric&lt;/figcaption&gt;

이 시리즈에서 이후 이어지는 아티클들은 다음 질문들에 대한 답을 찾아볼 것이다.

- 북극성 지표를 도입하려면 어떤 **인프라와 문화**가 필요한가?
- **프로덕트 생애 주기**에 북극성 지표를 어떻게 최적화 하는가?
- 북극성 지표 트리를 **고객 여정**에 어떻게 매핑할 것인가?
- PM, 엔지니어링, 디자인과 같은 다른 프로덕트 조직에 위해 신뢰도와 **오너십**을 어떻게 제공하는가?

만약 사용자의 행동을 어떻게 분석하고 북극성 지표를 수행하는 방법을 더 배우고 싶다면 이를 시작하기 위한 [리소스들](https://amplitude.com/understand-user-behavior)도 있습니다!</description>
          <pubDate>Fri, 30 Oct 2020 21:20:45 +0900</pubDate>
          <link>http://localhost:4000/blog/article_summary-4/</link>
          <guid isPermaLink="true">http://localhost:4000/blog/article_summary-4/</guid>
        </item>
        
    
        
        <item>
          <title>디자인 솔루션은 직감적이 아니라 계획적이어야 한다: Toughtful Execution Framework</title>
          <description>![](https://images.ctfassets.net/c1zhnszcah7h/6YoyPiCk1Gcj0ciOO2Bi0l/c8b2170ef28a55397e87789b1614ca82/Square_-_Thoughtful_Execcution.png?w=1648&amp;h=1648&amp;q=96&amp;fm=webp)

&lt;p class=&quot;text-gray&quot;&gt;
🔗이 글은 Annina Koskinen이 &lt;a href=&apos;https://spotify.design/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink1&apos; onclick=&apos;clickedOutlink(outlink1)&apos;&gt;&lt;img src=&apos;https://www.google.com/s2/favicons?sz=24&amp;domain=https://www.spotify.design/&apos; style=&apos;display:inline; height: 1em; position: relative; bottom: -2px;&apos;&gt; Spotify.design&lt;/a&gt;에 올린 &lt;a href=&apos;https://abit.ly/article_18&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink2&apos; onclick=&apos;clickedOutlink(outlink2)&apos;&gt;아티클&lt;/a&gt;을 번역, 요약한 글입니다.
&lt;/p&gt;

### ⚡️요약

&gt; 이 글은 디자인 프로세스에 대해 공부한 사람이라면 모두 알고 있는 Empathy - Design - Prototype - Test - Iteration 단계를 Spotify만의 언어로 다시 쓴 내용이라고 볼 수 있다. 이 때 중요한 점은 데이터를 바탕으로 해야 한다는 점이다. 팀은 비즈니스 목표를 달성하기 위한 역할을 하며, 디자인이 설정된 목표를 증명할 수 있는 지표를 움직이는 것을 확인해야 한다. 이 프레임워크는 다음과 같은 단계로 이루어진다.
&lt;br&gt;
&lt;br&gt;
1단계: 목표 정하기. 이 때 목표는 비즈니스 목표일 수 도 있고, 작은 단위의 개선 프로젝트일 수 도 있다.  
2단계: 목표와 관련한 데이터와 인사이트를 모으기. 목표와 관련된 사용자의 컨텍스트, 사용 행태, 멘탈 모델 등 다양하고 구체적인 데이터와 인사이트를 모은다.  
3단계: 수집된 데이터와 인사이트에서 기회나 문제[^1] 발견하기. 각 인사이트에서는 다양한 방식으로 기회나 문제가 정의될 수 있다.  
4단계: 각 포착한 기회나 문제를 해결할 수 있는 가설 세우기. 이 역시 하나의 기회나 문제를 여러 가설로 해결을 꾀할 수 있다. 만약 목표가 너무 커 발견한 기회나 문제도 크다면 집중하고자 하는 기회나 문제를 위한 또 하나의 Toughtful Execution Framework를 만들면 된다.  
5단계: 각 가설을 증명하거나 반박하기 위한 디자인 솔루션 만들기. 한 가설은 여러 디자인 솔루션으로 증명이나 반박이 가능하고, 각 솔루션을 임팩트와 실현 가능성으로 평가하여 테스트할 솔루션을 결정한다. 이 때 테스트할 솔루션은 MVP수준으로 만들어 테스트한다.  
6단계: 위에서 선정한 디자인 솔루션 테스트하기. 테스트한 결과는 가설을 증명할수도, 증명하지 못할수도 있다. 만약 결과가 가설을 긍정적으로 증명한다면, 더 많은 긍정적인 신호를 끌어내고 사용자의 만족도를 끌어올릴 수 있도록 MVP를 더 Iteration해야 한다. 반대로 결과가 가설을 증명하지 못한다면 다른 디자인 솔루션이나 다른 가정으로 넘어가 다시 단계를 진행한다.  
7단계: 테스트한 결과로부터 배우게 된 점을 정리해 팀이 앞으로 나아가는데 밑거름이 되도록 하기.

### Intro

직감은 창의적인 프로세스에 중요한 역할을 한다. 하지만 전략적인 결정을 하는 데 단독으로 사용되거나 한 가정에 대해 여러 해결책을 생각해보는 것을 막게 되어선 안된다.

Annina Koskinen은 Spotify의 그로쓰 임무를 수행하는 팀이 목표를 달성하고 영향력을 행사할 수 있는 리소스가 되어준 Thoughtful Execution Framework을 제시한다.

Thoughtful Execution Framework은 여러 문제나 기회를 식별하는 방식으로 데이터와 직감을 활용할 수 있도록 하고, 하나의 해결책으로 수렴하기 전에 가설 수립과 발산을 광범위 하게 진행할 수 있도록 한다.

[📕 PDF 가이드](https://assets.ctfassets.net/c1zhnszcah7h/71ixcjK1NotIRxz9TZW0M8/96da3c42168eebc9d9afa76386d795c8/The___Thoughtful_Execution___Framework_by_Annina_Koskinen.pdf)나 [&lt;img src=&apos;https://www.google.com/s2/favicons?sz=24&amp;domain=https://www.figma.com/&apos; style=&apos;display:inline; height: 1em; position: relative; bottom: -2px;&apos;&gt; Figma 템플릿](https://www.figma.com/community/file/855424928781780662), [&lt;img src=&apos;https://www.google.com/s2/favicons?sz=24&amp;domain=https://www.mural.co/&apos; style=&apos;display:inline; height: 1em; position: relative; bottom: -2px;&apos;&gt; Mural 템플릿](https://www.mural.co/templates/thoughtful-execution-tree)을 활용하여 이 프레임워크를 사용할 수 있다.

&lt;hr&gt;

우리는 우리의 마음과 감정의 목소리를 맹목적으로 신뢰해서는 안된다. 우리의 마음은 항상 감정과 과거 경험을 바탕으로 주관적인 표현만을 제공하기 때문이다. 하지만 우리의 의견과 선택은 항상 어느정도 직감에 의거하기 때문에 이 주관적인 마음을 완전히 배재할 순 없다. 이건 잘못된 것이 아니라 다양성을 만들어주는 아름다운 것이다. 서로 다른 관점과 경험을 가진 사람들이 무엇이 더 합리적인 판단인지 알아내려 하는 것이 전략적인 비즈니스 결정이기 때문에 우리는 이 주관성에 대해 더 잘 알고 있어야 한다.

약 5년 전 Spotify가 새로운 Tribe를 만들려고 하던 때, 성공적인 팀을 가장 잘 구성하는 3가지 방법을 세워볼 수 있었다.

첫째, 조직의 모든 팀이 통찰력과 회사의 전략을 바탕으로 한 **명확한 목표**를 가지고 있다.  
둘째, 이러한 **목표는 측정할 수 있어** 우리의 업무가 비즈니스에 미치는 영향을 추적할 수 있어야 한다.  
마지막으로, 팀들은 그들의 **목표를 달성하기 위한** 세심하게 세운 **계획**을 가지고 있어야 한다.

팀에게는 보통 다음과 같은 일이 많았기 때문에 여기에서 개선의 기회를 발견하였다.

![one goal, one idea](https://images.ctfassets.net/c1zhnszcah7h/1S5Vcmlumx2lr4xd7rkAtK/87779df606859afed1ef0c02413c91cd/Thoughtful_Execution_Inline_-_1.png?w=2000&amp;h=1177&amp;q=96&amp;fm=webp)

&lt;figcaption&gt;One goal, one idea.&lt;/figcaption&gt;

비즈니스 목표가 세워진 다음, 팀은 보통 곧바로 그 목표를 달성할 아이디어를 생각하는데 몰두하곤 했다. 그리곤 한 반짝이는 아이디어를 발견해 이 아이디어가 원하는 효과를 제공하는지 얼른 A/B 테스트를 하려 했다. 하지만 우리는 곧 목표에 한 솔루션만으로 곧바로 달려가고, 그 솔루션이 원하는 결과를 주지 못하면 되돌아서서 그 이유를 찾는게 굉장히 힘들다는 것을 배우게 되었다. 솔루션을 잘못 디자인 한건지? 아니면 가정이 옳지 못했던건지? 그것도 아니라면 진짜 문제를 해결하고 있던게 맞긴 한건지?

팀들이 이런 막막한 상황에 놓이는 것을 막기 위해 이런 마인드셋을 가질 수 있는 방법을 생각해보기로 했다.

## The Thoughtful Execution tree

한 솔루션으로 곧바로 달려들게 하는 생각을 바꾸기 위해, 프로덕트 개발 프로세스에 필수적인 스텝을 밟도록 하였다. 이런 스텝은 트리 구조로 보여줘 팀들이 이 스텝을 순서대로 밟는 것을 도왔다. 우리는 팀이 문제 발견, 가설 수립, 아이디어 발산 과정을 넓게 먼저 본 후 하나의 솔루션으로 수렴할 수 있도록 하고자 했다.

![The Thoughtful Execution tree](https://images.ctfassets.net/c1zhnszcah7h/4MqSDogtPyLo6o6pFdba7H/dba74509a81a75cb42d06dd19016073d/Thoughtful_Execution_Inline_-_2_2x__1_.png?w=2000&amp;h=1177&amp;q=96&amp;fm=webp)

&lt;figcaption&gt;The Thoughtful Execution tree.&lt;/figcaption&gt;

## It all starts with data and insights

만약 친구가 당신에게 다른 나라로 이민간 뒤 외롭다고 불평하면, 아마 이런 말을 하고싶은 생각이 들 것이다. &quot;원래 책 읽는거 좋아했으니까 독서모임 같은델 들어가는건 어때?&quot;. 아마 다른 사람은 동료들이랑 더 많은 시간을 보내라고 말 할 수도 있을 것이다. 하지만 그 친구의 행동을 세심하게 분석해야 그녀가 외롭다고 하는 진짜 이유를 알아낼 수 있을 것이다. 그녀가 일이 너무 많아 친구를 만날 시간이 없을 수도 있고, 아직 언어가 유창하지 못해 사회적인 교류를 못할 수 있을 수도 있다. 진짜 문제를 제대로 이해해야 유의미한 조언을 해줄 수 있을 것이다.

비즈니스 세계에서도 이와 비슷하게, 목표가 세워졌다면 해결해야 할 잠재적인 문제와 기회가 무엇인지 정확하게 알기 위해 데이터와 인사이트를 모으는데 충분한 시간을 들여야 한다. Spotify에서는 이것을 산(mountains)이라고 부른다. 마치 산처럼 이 문제와 기회들은 높이도 다르고, 달성할 수 있는 난이도도 달라 각각에 맞는 고유한 전략이 필요하다.

![Surveying the opportunity mountains.](https://images.ctfassets.net/c1zhnszcah7h/qISyKnkwPqDMKmcqjdmog/9e063c7904366a90e479694b8079b9ad/Thoughtful_Execution_Inline_-_3_2x__1_.png?w=2000&amp;h=1177&amp;q=96&amp;fm=webp)

&lt;figcaption&gt;Surveying the opportunity mountains.&lt;/figcaption&gt;

브라질에 있는 팀에서 사용자가 음악을 들으러 계속 Spotify로 돌아올 수 있는 방법에 대해 고민하고 있었다. 물론 브라질 사람들이 더 앱에 자주 들어올 수 있도록 하는 많은 아이디어를 떠올릴 수도 있었겠지만, 데이터와 인사이트를 충분히 모아보니, 제대로된 솔루션이 있다면 더 많은 사람들이 활성 사용자(active user)로 남을 수 있는 아주 색다른 문제와 기화를 발견할 수 있었다. 해결하고자 하는 한 영역은 로컬 브라질리언 음악 카탈로그를 새로운 사용자에게 더 효율적으로 제공하는 쪽이었고, 다른 한 영역은 느린 네트워크 속도에 맞춰 어플리케이션 퍼포먼스를 최적화 하는 것이었다.  이런 아주 다른 두 문제와 기회는 아주 다른 솔루션으로 해결해야 할 것이며 데이터와 인사이트를 통해 올바른 방향을 바라보는 것이 중요하다는 것을 알 수 있다.

해결할 서로 다른 문제와 기회를 발견한 뒤 다음으로 할 일은 이를 해결했을 때 가장 임팩트가 큰 곳이 어딘지 아는 것이다. 가능하다면 데이터 사인티스트 친구에게 빠른 조사나 실험을 해서 어떤 기회의 &quot;산&quot;이 가장 높은지 알아봐 달라고 할 수 있다. 프로젝트의 범위에 따라 목표의 지표를 움직이기에 가장 적합한 방법으로 하나의 문제나 기회에 집중하는 것으로 결정할 수도 있고, 여러 개를 한 번에 해결하려 할 수도 있다.

![To maximize impact, assess which opportunity mountain is the tallest.](https://images.ctfassets.net/c1zhnszcah7h/3urW8h9ZAxtAPmRQDXXAjs/e341f23d2da441c1a9dce559c8c52ed5/Thoughtful_Execution_Inline_-_4_2x.png?w=2000&amp;h=1177&amp;q=96&amp;fm=webp)

&lt;figcaption&gt;To maximize impact, assess which opportunity mountain is the tallest.&lt;/figcaption&gt;

하나의 문제나 기회에 집중하기로 했다면, 그 문제나 기회에 대한 또 하나의, 더 자세한 Toughtful Execution tree를 만드는 것이 좋다. 예를 들어, 한 팀이 Spotify 모바일 가입 경험을 최적화 하려고 할 때, 그들의 최초 목표는 가입에 성공하는 수를 늘리는 것 이었을 것이다. Funnel은 어느 프로덕트를 보아도 어느정도 비슷하다. 100%의 사람들이 funnel에 들어와서, 계속 남아있을 동기에 따라 다른 수가 다른 순서에서 이탈하게 될 것이다.

많은 앱들은 서비스를 사용하기 위해 계정을 만들어야 한다. 그리고 많은 회사가 이 경험을 최대한 부드럽게 만들어 서비스를 사용하기 위해 동기로 가득차지 않은 사람들까지도 &quot;한 쪽 끝에 있는 문&quot;을 통과시키기 위해 최적화에 힘을 쓴다. 우리 가입 팀이 데이터와 인사이트를 보기 시작했을 때, funnel에서 더 최적화할 수 있는 키 포인트를 발견할 수 있었다.

1. 몇몇 사람들은 Spotify 앱을 다운 받았지만, 가입 폼 화면까지 오지 않았다.
2. 몇몇 사람들은 가입 폼 화면으로 들어왔지만, 폼을 완성하지 않았다.
3. 몇몇 사람들은 가입 폼 화면으로 들어오고, 폼을 완성했지만 어떤 오류때문에 가입에 실패했다.

![Examples of opportunity statements.](https://images.ctfassets.net/c1zhnszcah7h/7o6JpkwN7Vj4wuDs78Y0TN/020b4968ea319ed4b8d592a36a62caf3/Thoughtful_Execution_Inline_-_5_2x__1_.png?w=2000&amp;h=1177&amp;q=96&amp;fm=webp)

&lt;figcaption&gt;Examples of opportunity statements.&lt;/figcaption&gt;

이 세 목표는 모두 그들의 목표하는 지표를 개선할 수 있었을 것이지만, 팀은 세 번째 기회를 먼저 집중하기로 했다. 세 번째 기회에 있는 사람들은 가입에 대한 동기를 분명히 보였지만 가입 하기에 실패했기 때문이다. 이제 팀은 또 다른 Toughtful Exeucution Tree를 만들었고, 이번엔 목표를 더 구체적으로 잡았다.

![Example of a tree built for a specific goal.](https://images.ctfassets.net/c1zhnszcah7h/6SVuqpAeuyVorHBhZOtgwO/7bb62583274485e862b0bade3fc85d14/Thoughtful_Execution_Inline_-_6_2x__1_.png?w=2000&amp;h=1177&amp;q=96&amp;fm=webp)

&lt;figcaption&gt;Example of a tree built for a specific goal.&lt;/figcaption&gt;

가입 화면의 데이터를 수집하고 경험에 대한 양적인 테스트를 수행해 가입 폼에 대한 가설을 세울 수 있는 더 구체적인 문제와 기회를 발견할 수 있었다.

## From opportunities to multiple hypotheses and solutions

모든 문제와 기회는 여러 다른 결과에 도달할 수 있는 여러 다른 방식으로 설명될 수 있다. 이 때문에 우리가 가장 원하는 결과로 도달할 수 있는 방법이 무엇인지 확인할 수 있도록 각 기회마다 여러 가설을 세우는 것이 중요하다. 세워진 각 가설은 또 여러 솔루션을 가질 수 있으므로, 하나의 디자인 솔루션을 실행해 보는 것으로는 가설을 증명하거나 반박할 수 없다.

우리가 왜 어떤 플레이리스트가 각 사용자에게 추천 되었는지 더 잘 설명할 수 있는 기회를 탐색하고 있을 때, 우리는 여러 가설을 세웠고 그 중 일부가 아래 트리에 표현되어 있다. 또 트리는 하나의 가설이 여러 방법으로 디자인될 수 있다는 점도  보여준다. 그리고 각 방법은 서로 다른 방식으로 효과를 보였을 것이다.

![Examples of different design solutions for a single hypothesis. L-R: Listing out artists per a set of playlist recommendations; using a single artist as a hook to different playlists; listing out artists per playlist.](https://images.ctfassets.net/c1zhnszcah7h/4W1ZzU914vUgdFxKSUGmS/627ebc8f426ee263f361775165c2bbb2/Thoughtful_Execution_Inline_-_7.png?w=2000&amp;h=1177&amp;q=96&amp;fm=webp)

&lt;figcaption&gt;Examples of different design solutions for a single hypothesis. L-R: Listing out artists per a set of playlist recommendations; using a single artist as a hook to different playlists; listing out artists per playlist.&lt;/figcaption&gt;

## From solutions to learnings

솔루션 디자인 단계에서, 테스트 할 MVP(Minimum Viable Product)로 스콥을 줄여나가기 전에 일단 과감하고 자유롭게 생각해야 한다. 점진적인 개선을 할 수 있는 단기적인 방식과 더 큰 변화가 필요한 장기적인 방향성 모두를 생각해야 한다. 위 예시들은 대체로 점진적인 개선이 들어있긴 하지만, Toughtful Execution은 이미 존재하는 것을 변화시키는 것 뿐만 아니라 완전히 새로운 것을 생각할 때도 잘 작동한다. 당신의 트리는 프로덕트의 가치를 제안하는 첫 단계에서는 좀 더 높은 곳에서 바라보고 있어야 하고, 기초를 정확하게 다진 다음엔 최적화가 나와야 한다. 프로덕트가 성숙하지 못한 상태라면, 지표의 임팩트를 측정하기 위해 더 큰 도약이 필요할 것이다.

당신이 솔루션을 디자인 했다면, 원하는 임팩트를 만들어 내는데 가장 효과적일 것이라고 생각되는 것을 테스트 할 차례다. 아이디어를 만족도와 실현 가능성으로 분석해보자. 예상되는 임팩트와 실행할 수 있는 속도도 염두에 두자. 가장 많은 것을 배울 수 있는 아이디어와 가장 만들기 쉬운 아이디어가 무엇인지 각각 평가해보자.

양적인 테스트는 A/B 테스트에 적합한 사항에 대한 많은 정보를 제공할 수 있다. 테스트를 해보고 실험을 하는 과정에서 또 다른 솔루션을 떠올리게 될 것이고 더 많이 배우면서 트리도 함께 업데이트 할 수 있을 것이다. 우리의 목표는 솔루션이 목표의 지표를 움직이는지를 확인해 가설을 증명하거나 반박하는 것이다. 목표하는 지표가 움직이지 않는 여러 솔루션을 실험했다면, 트리의 다른 가지로 옮겨갈 시간이 됐다는 의미이다. 반대로 MVP가 성공적인 결과를 내었다면, 솔루션을 더 반복 수정한다면 더 긍정적인 효과를 볼 수도 있을 것이니 다른 기회로 넘어가기 전에 반복 수정하는 것이 중요하다.

## The power of Thoughtful Execution

우리가 팀에 우리의 프레임워크를 소개해줬을 때, 우리는 그들이 탐색하고 있는 가설의 질이 올라가고 비즈니스 지표가 긍정적인 트렌드를 그리는 것을 명확하게 확인할 수 있었다. Spotify의 문화는 자율성이 강조되기 때문에, Toughtful Execution을 공식적인 프로세스로 소개되는 것을 원하지 않았다. 우리는 팀에게 Toughtful Execution tree를 문서화 할 수 있는 한, 그들이 트리의 각 스텝을 어떤 도구를 사용해 수행할 지에 대한 자율성을 제공했다. 이 프레임워크는 팀이 작업을 구조화 하고 업무를 목표에 맞춰 조정하고, 팀 외부에 작업 중인 내용과 그 이유, 이후 어떤 영역에 초점을 맞출 지를 전달하는데 유용한 도구가 되어주었다.

## Your turn

우리는 Toughtful Execution을 그로쓰 팀에서 5년 동안 사용 해오며 이 프레임워크를 외부에 알릴 때가 되었다고 생각했다. 그 과정에서 배운 팁들을 남겨둔다.

### 1. Don&apos;t get paralyzed by not having enough data

달려 들 문제와 기회를 정의하는 데 최대한 많은 데이터와 인사이트를 동원해야 하는 것이 중요하긴 하지만, 일을 진행하기 전에 모든 것을 안다는 것은 비현실 적인 일이다. 여러 회사의 여러 팀은 데이터와 리서치에 다른 수준을 가지고 있으며, 충분한 인사이트를 가지지 못하는 상황은 일반적인 일이다. 빠른 인사이트를 얻을 수 있는 다른 방법을 생각해보라. 유사한 프로덕트를 벤치마크 해보거나, 당신의 프로덕트에 대한 전문가 평가를 수행해보라. 가능하다면 당신의 프로덕트에 대한 학습 실험을 수행해 추가적인 인사이트를 얻을 수도 있다. 기회를 발견하고 정의하는데 직감을 사용해도 괜찮다. 하지만 직감은 양심적으로 사용하고, 사용한 가정이 사실인지 확인하자. 중요한 것은 진행하는 것이며 Toughtful Execution tree는 배워가는 과정에서 계속해서 업데이트 할 수 있다.

### 2. Be mindful of which testing method to use

양적인 실험이 핵심 비즈니스 메트릭이 어떻게 영향을 받았는지 확실한 데이터를 제공하긴 하지만, 질적인 방식에서도 많은 것을 배울 수 있다. 과감한 아이디어를 정성적인 설정으로 테스트 해보는 것은 무언가를 만들기 위해 시간과 리소스를 투자하기 전 빠르고 저렴하게 테스트 해볼 수 있는 방식이다. 예를 들어, Spotify의 핵심 네비게이션을 리디자인 할 때, 우리는 card sorting 기법을 사용해 Spotify의 다른 콘텐츠 세트와 기능을 각 카드에 담아 기존 유저와 신규 유저에게 그룹핑 하고 구조화 하는 실험을 하였다. 이 리서치에는 하루만 소요되었고, 프로토타입을 만드는데 무언가를 투자하지도 않았지만 사람들이 우리의 프로덕트를 어떻게 멘탈 구조로 바라보고 있는지 알 수 있었다.

### 3. Holistic changes tend to move metrics

리텐션과 같은 큰 비즈니스 지표를 움직이는 것은 어려운 일이니 당신의 실험이 중립적인 결과를 보이더라도 실망하지 말라. 우리가 무료 티어 고객에게 제공 할 온보딩 기능을 탐색하고 있을 때, 프로덕트 교육의 한 부분이 질적인 실험에서는 긍정적인 결과를 보였지만 양적인 지표를 움직이지는 못한 경우를 종종 발견하였다. 하지만 우리가 한 번에 여러 변경한 실험을 진행했을 때는 리텐션이 상승하는 것을 확인할 수 있었다.

### 4. MVP only gets you basecamp

당신의 실험이 목표하는 지표를 긍정적인 방향으로 움직이는데 성공했다면, 이 실험을 확장하고 다음 기회로 넘어가고자 하는 생각이 들 것이다. MVP는 기회의 산에 있는 &quot;베이스캠프&quot;까지만 데려다 줄 뿐, 경험을 더 개선한다면 더 많은 임팩트를 가져갈 수 있을 것이다. MVP는 보통 경험을 위한 꼭 필요한 기능을 넣기 위해 프로덕트 만족도에 큰 임팩트를 줄 수 있는 만족도를 위한 요소가 제거된 경우가 많다.  따라서 MVP를 프로덕트 전반에서 높은 퀄리티를 낼 수 있도록 최적화 하는 과정이 중요하다.

[^1]: Spotify에서 는 이 발견할 수 있는 기회나 문제가 각각 높이도 다르고, 달성하기 위한 난이도도 다르기 때문에 &apos;산&apos; 이라고 비유해 부른다.</description>
          <pubDate>Fri, 25 Sep 2020 23:40:45 +0900</pubDate>
          <link>http://localhost:4000/blog/article_summary-3/</link>
          <guid isPermaLink="true">http://localhost:4000/blog/article_summary-3/</guid>
        </item>
        
    
        
        <item>
          <title>오류 메세지 문장 작성법 간단히 살펴보기</title>
          <description>&lt;p class=&quot;text-gray&quot;&gt;
🔗 이 글은 Jason Fox가 &lt;a href=&apos;https://uxdesign.cc/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink1&apos; onclick=&apos;clickedOutlink(outlink1)&apos;&gt;UX Collective&lt;/a&gt;에 올린 &lt;a href=&quot;https://abit.ly/article_16&quot; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink2&apos; onclick=&apos;clickedOutlink(outlink2)&apos;&gt;미디엄 글&lt;/a&gt;을 번역, 요약한 글입니다.
&lt;/p&gt;

### ⚡️요약

&gt; 1. Constant Component에 제공되어야 할 정보를 작성하기
2. Dynamic Component에서 오류 상황의 컨텍스트를 더 잘 이해시킬 수 있도록 보강하기  
*최소 요구 조건은 Constant Component이다. 잘 작성된 Constant Component만 있어도 유저의 오류 상황을 명확히 인지시키고 해결할 수 있다.
* Constant Component는 사용자가 취할 수 있는 액션 경로와 무엇이 왜 발생했는지 명시
* Dynamic Component는 오류 상황에 대한 

### 오류 메세지 작성을 위한 건축 블록

디지털 프로덕트를 만드는 과정에서 오류 메세지는 끊임없이 작성되어야 한다. 오류 메세지 작성의 핵심 건축 블록으로 오류 상황에서 제공되어야 할 정보를 경제적이고 사용자 중심적으로 디자인할 수 있다.

모든 오류 메세지는 두 가지 종류의 핵심 컴포넌트로 구분할 수 있다.

```
1. Constant Components
```

Constant Component는 필수 요소이다. 여기엔 사용자에게 어떤 일이 일어났고, 왜 일어났고, 어떻게 진행할 수 있는지에 대한 정보를 제공한다.

이 컴포넌트는 다음 정보를 포함할 수 있을 것이다:

- 사용자가 취할 수 있는 액션 경로 (Action path)
- 무엇/왜 를 설명하는 문장 (What/why statements)


```
2. Dynamic Components
```

이 컴포넌트는 오류 상황의 심각성, 원인, 다른 요소 등에 의해 조절될 오류 메세지의 톤을 조정하는 역할을 한다.

이 컴포넌트는 다음 정보를 포함할 수 있을 것이다:

- 초래된 결과 (Impact statements)
- 상황 확인/사과 (Acknowledgements/apologies)
- 다른 해결 방안 (Alternate resolution paths)
- 의례 어구 (Politeness markers)
- 담화 어구 (Discourse markers)

![Good Error message example 1](https://miro.medium.com/max/1400/1*xZlzjnNGRorReOSq3H_-Pg.png)

![Good Error message example 2](https://miro.medium.com/max/1400/1*cnuSLNYWGBjAp0G0gm5M9A.png)

### 오류 메세지 문장이 잘못된 경우

오류 메세지가 기본 구성에서 벗어나 있다면 사용자들은 오류 상황을 명확하게 인지하지 못하게 될 것이고, 그 오류 메세지는 곧 SNS에서 까이게 될 것이다.

![Bad Error message example 1](https://miro.medium.com/max/1400/1*iYDqQSuGT2Lku9tUMg6y7A.png)

![Bad Error message example 2](https://miro.medium.com/max/1400/1*IGdrWARpuHYbnqWF_9xG-w.png)

![Bad Error message example 3](https://miro.medium.com/max/1400/1*MIwPQ_SpUGDZ7_rr3iVvXg.png)

### 이 문장을 활용하는 방법

- 오류 메세지를 작성할 때 Constant Component를 작성하는 것을 목표로 하기
- 오류 발생한 컨텍스트의 살을 붙이기 위해 Dynamic Component를 작성하기
- 어떤 종류의 오류 메세지들은 왜 제구실을 하지 못하는지에 대한 가설을 생각해보기
- 작성한 오류 메세지를 한 번 더 검수하기
- 깊게 파고들 수 없는 작은 프로젝트이더라도 매번 유용한 오류 메세지를 작성하는 패턴을 만들기</description>
          <pubDate>Wed, 09 Sep 2020 07:37:45 +0900</pubDate>
          <link>http://localhost:4000/blog/article_summary-2/</link>
          <guid isPermaLink="true">http://localhost:4000/blog/article_summary-2/</guid>
        </item>
        
    
        
        <item>
          <title>디자인 조사 방법: 독립 집단 설계 vs 반복 측정 설계</title>
          <description>&lt;p class=&quot;text-gray&quot;&gt;
🔗 이 글은 Raluca Budiu가 &lt;a href=&apos;https://www.nngroup.com/&apos; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink1&apos; onclick=&apos;clickedOutlink(outlink1)&apos;&gt;&lt;img src=&apos;https://www.google.com/s2/favicons?sz=24&amp;domain=https://www.nngroup.com/&apos; style=&apos;display:inline; height: 1em; position: relative; bottom: -2px;&apos;&gt; Nielsen Norman Group&lt;/a&gt;에 올린 &lt;a href=&quot;https://abit.ly/article_11&quot; target=&apos;blank&apos; rel=&apos;nofollow&apos; id=&apos;outlink2&apos; onclick=&apos;clickedOutlink(outlink2)&apos;&gt;아티클&lt;/a&gt;을 번역, 요약한 글입니다.
&lt;/p&gt;

### ⚡️요약

&gt; 사용자 리서치에서 크게 두 가지 방법이 있고, 두 방법의 특징을 알고 더 좋은 방법을 선택해야 한다
- 반복 측정 설계는 참가자 간 차이를 상쇄할 수 있지만, 학습 효과를 방지하기 위해 랜덤화를 사용해야 하고
- 독립 집단 설계에서는 조건 간 학습 효과를 상쇄할 수 있지만, 참가자 간 차이를 상쇄할 수는 없음


### 용어 정리

`Between-Subjects Study Design`: 독립 집단 설계  
`Within-Subject Study Design`: 반복 측정 설계

한 조사에서 여러 사용자 인터페이스를 비교하려 할 때, 다음과 같은 조건들로 실험 참가자에게 태스크를 부여할 수 있다.

- 독립 집단 설계: 각 실험 조건에 각기 다른 사람이 참여함. 한 사람은 한 인터페이스에만 노출될 수 있도록 함
- 반복 측정 설계: 동일한 사람이 모든 실험 조건에 노출되도록 함

#### 정량적 조사에서 실험 디자인

주로 정량적 사용성 조사는 비교하는데 핵심 목표를 둔다. 예를 들어 경쟁사의 웹사이트, 다른 두가지 버전의 디자인, 사용자 그룹의 두 종류(experts vs. novices) 간 비교가 있다. 이 때 정량적 분석에서는 두 가지 변수가 있다.

**독립 변수(Independent variables)**: 리서처에 의해 직접적으로 조정되는 것  
**종속 변수(Dependent variables)**: 측정되는 것 (그리고 독립 변수의 조정에 따라 결과가 달라질 것으로 예상되는 것)

&gt; 만약 조사가 통계적으로 유의미한 결과를 만든다고 했을 때,  
`독립 변수의 조정`이 `종속 변수의 변화`를 `야기했다`고 할 수 있다.

자동차 렌트 사이트의 예시로 돌아가보자.

두 렌탈 사이트중 자동차를 렌트하는데 더 나은쪽이 어디인지 알고 싶다면, 사이트를 독립 변수로, 태스크를 수행하는데 걸리는 시간과 정확도를 종속 변수로 둘 수 있다. 이 때 조사의 결과는 종속 변수인 시간과 정확도가 사이트를 다르게 할 때 달라지거나 동일하게 유지되는 것으로 나올 수 있을 것이다(만약 동일하게 유지된다면, 두 사이트 중 더 나은 곳은 없다는 의미)

이 때 조사를 위한 실험 방법을 선택하는 것은 데이터를 통계적으로 분석하는 방법에 영향을 준다.

![Within-subjects and Between-subjects Design image](https://media.nngroup.com/media/editor/2018/03/15/between-within-watermark.jpg)

&lt;figcaption&gt;독립 집단 설계와 반복 측정 설계 방법에 대한 설명&lt;/figcaption&gt;

실험 방법은 독립 집단 설계이면서 반복 측정 설계일 수 있다.&lt;br&gt;
30살 미만 사용자와 그렇지 않은 참가자 간 비교를 하고 싶을 때, 독립 변수는 두가지가 된다

1. **나이** - 2가지 타입: 30살 미만, 30살 이상
2. **사이트** - 2가지 타입: A, B

예를 들어, 각 연령 그룹에 동일한 숫자의 참가자를 모집하고 각 참가자를 A와 B 사이트 모두에서 자동차 렌탈을 수행한다고 하자.

그렇다면 이 조사는 독립 변수 **사이트**에 대해서는 반복 측정 설계이고(각 참가자는 두가지 사이트 모두를 보게 되니까),&lt;br&gt;
독립 변수 **나이**에 대해서는 독립 집단 설계가 된다(각 참가자는 30살 미만이거나 30살 이상이며, 둘 다일 수 없음). 

```
30살 미만의 참가자를 30살 이상이될 때 까지 기다렸다가 다시 조사를 한다면 반복 측정 설계가 될 수 있겠지만, 현실적으로 말이 되지 않음
```

일부 **독립 변수의 종류**는 디자인 방법에 영향을 준다.&lt;br&gt;
예를 들면 위와 같이 나이, 전문성, 사용자 타입 (business traveler, leisure traveler), 성별 (한 사람이 한 성별만 가지고 있다고 가정하면)과 같은 변수가 그렇다.

사용성 뿐 만 아니라 **약물 실험**과 같은 경우도 독립 집단 설계일 수 밖에 없다. 각 참가자는 두 가지 모든 약에 노출되지 못하고, 한 종류의 약물에만 노출되어야 한다.

또 **변수의 조작** 자체가 참가자에게 영향을 줄 수도 있다. 읽기에 더 도움되는 교수법을 확인하고 싶을 때, 한 사용자는 이전의 교수법에서 읽기 능력이 향상되었을 수 있으므로 두 가지 방법을 모두 사용할 수 없다.

#### 독립 집단 설계 vs 반복 측정 설계 어느 것이 더 나을까

답은 ~~언제나 그렇듯~~ &quot;때에 따라서 다르다&quot; 이다.

- **독립 집단 설계는 학습 효과와 조건 간 방해 효과를 최소화 할 수 있다**&lt;br&gt;
    한 사이트에서 자동차를 빌려 본 참가자는 자동차 렌탈 과정에 대해 더 잘 알게될 것이다. 이러한 지식은 두 번째 사이트에서 더 효율적으로 태스크를 수행할 수 있도록 할 것이다.
- **독립 집단 설계는 반복 측정 설계보다 더 짧은 세션 시간이 소요된다**&lt;br&gt;
    두 번 측정하는 것 보다 짧은 시간이 소요되는 것이 덜 지치고 덜 지루할 것이다. 또 원격 조사나 연구자가 함께하지 않는 조사에서 더 유용할 수 있다.
- **독립 집단 설계는 더 많은 독립 변수가 있을 때 더 설계하기 쉽다**&lt;br&gt;
    설계 순서에 따른 노이즈를 최소화 하기 위해 랜덤화를 사용해야 한다. 모든 사용자에게 사이트 A 다음 사이트 B를 수행하도록 하지 않아야 할 것이다. 두 개 사이트에 대한 실험은 설계하기 쉽지만, 독립 변수가 많거나 한 변수의 레벨이 다양해지는 경우 현존하는 정량적 조사 플랫폼에서 랜덤화를 도입하기 어려울 것이다.
- **반복 측정 설계는 더 적은 참가자로 더 저렴하게 수행할 수 있다**&lt;br&gt;
    정량적 조사 방법에서는 보통 각 조건 별로 30개 이상의 데이터 포인트를 가져야 통계적 유의성을 확보할 수 있다. 독립 집단 설계에서는 두 사이트 모두에서 30명의 참가자가 필요하지만, 반복 측정 설계에서는 두 사이트를 합쳐 30명의 참가자만 있으면 된다. 두 배나 저렴하다
- **반복 측정 설계는 랜덤 노이즈를 최소화 한다**&lt;br&gt;
    💎이것은 반복 측정 설계의 가장 큰 장점이다.&lt;br&gt;
    모든 참가자들은 각자 자신의 백그라운드, 컨텍스트, 상황을 가지고 있을 것이다. 동일한 참가자가 변수의 모든 레벨과 상호작용 하면, 전체에 대해 모두 동일하게 영향을 주고받게될 것이다.&lt;br&gt;
    독립 집단 설계일 경우 만약 행복한 사람과 피곤한 사람이 실험에 참여했을 경우 결과가 원하는대로 나오지 않을 수 있다. 독립 집단 설계에서 각 집단 참가자들을 다른 집단 참가자들과 성향, 백그라운드, 컨텍스트, 상황을 일치시키는게 좋지만, 이 모든것을 예측해서 참가자를 구하기란 불가능하다.

#### 랜덤화는 두 방법 모두에서 필요

반복 측정 설계에서 랜덤화가 필요한 이유는 실험의 순서에서 오는 학습 효과와 조건 간 전이 효과를 반감시키기 위한 것이다.

독립 집단 설계에서 랜덤화는, 참가자가 각 조건에 랜덤하게 배정되어야 한다는 의미이다. 리서처가 좋아하는 사람들을 사이트 A에 배정하고 그 결과가 B보다 좋았다고 하면 안된다는 것이다.

#### 결론

사용자 조사는 독립 집단 설계일 수 도 있고, 반복 측정 설계일 수도 있다. 둘 다 일 수도 있고. 각각의 조사 방법은 장단점이 있으니 이를 잘 고려해 방법을 선택해야 할 것이다.

요약하자면, 다음과 같다

&gt; - 반복 측정 설계
    - 더 적은 참가자
    - 더 싼 실험 가격
    - 조건 간 진짜 차이를 알 수 있음
- 독립 집단 설계
  - 조건 간 학습 효과의 최소화
  - 더 짧은 세션 시간
  - 더 쉬운 설계와 더 쉬운 분석

덧, 이 아티클의 내용을 읽으니 [📕 원인과 결과의 경제학](https://coupa.ng/bICmrN) 책이 연상되었다 👇

&gt; 이 아티클과 원인과 결과의 경제학은 독립 변수를 조정하여 실험한 결과에서 종속 변수가 변화 했을 때, 독립 변수가 정말로 종속 변수의 변화를 야기 했는지 통계적 유의미성을 확보하기 위한 방법에 대해 말하고 있는 점이 유사했다. 이 아티클에서는 조사 방법론 측면에서 두 방법과 각 방법의 유의점을 소개했고, 원인과 결과의 경제학에서는 통계적으로 유의미성을 증명할 수 있는 방법에 대한 소개가 담겨있다.&lt;br&gt;
&lt;br&gt;
이상적으로는 반복 측정 설계 + 랜덤화를 사용하는 것이겠지만, 독립 변수의 개수가 많아진다거나, 조사 설계와 분석 방법에서 걸림돌이 있을 수 있겠다. 통계학에 대한 궁금증이 늘어간다.

&lt;br&gt;
&lt;figcaption&gt;책 링크를 통해 구매하시면 저에게 일정액의 수수료가 제공될 수 있습니다.&lt;/figcaption&gt;</description>
          <pubDate>Fri, 28 Aug 2020 23:40:45 +0900</pubDate>
          <link>http://localhost:4000/blog/article_summary-1/</link>
          <guid isPermaLink="true">http://localhost:4000/blog/article_summary-1/</guid>
        </item>
        
    
        
        <item>
          <title>Jekyll 테마 찾고 설치하는 법</title>
          <description>&lt;p class=&quot;text-gray&quot;&gt;
이전 글 → &lt;a href=&quot;https://tjrichard.github.io/blog/github-pages-series-1/&quot; id=&apos;outlink&apos; onclick=&apos;clickedOutlink(outlink)&apos;&gt;Github.io로 나만의 블로그 만들기 (1): 가입 및 초기 세팅&lt;/a&gt;
&lt;/p&gt;


### 지난 글과 다른 점

지난 글에서는 Github.io로 블로그 페이지를 만들 수 있는 틀을 구축했다면, 이번 글에서는 이미 잘 만들어진 블로그 테마를 찾고, 나의 블로그에 적용하는 과정을 다룬다.

---

### Jekyll 테마를 찾기 전

이 글을 읽는 우리의 1차 목표는 내 입맛에 맞는 디자인으로 Github 블로그를 만들어 보는 것이고, 2차 목표는 그렇게 만든 블로그로 실제 블로그를 운영하는 것이다.

`Github.io로 나만의 블로그 만들기` 시리즈는 내가 원하는 스타일과 인터랙션으로 커스터마이징 하는 과정이 포함되어 있다. 따라서 두 목표 모두 실현할 수 있기 위해서 우리가 고려해야 하는 것은 1. 테마의 디자인, 2. 테마의 기능 지원 여부, 3. 테마의 블로그 구조이다.

**1. 테마의 디자인**에서 봐야할 것은 테마의 컨셉, 레이아웃, Table of Contents 지원, 포스트 검색 기능 지원, 코드 하이라이팅, 링크 하이라이팅, 모바일 혹은 반응형 대응 등이 있다.

**2. 테마의 기능 지원 여부**에서는 애널리틱스 지원, 태그 페이지 지원, 인기 글 모아보기 지원 등이 있다.

**3. 테마의 구조**는 아래👇에서 더 상세하게 알아보자.

---

### 🧱 테마의 구조

Jekyll 테마를 선택하기 전 내가 만들려고 하는 블로그의 구조를 어떻게 짤 것인가를 먼저 생각해봐야 한다. 왜냐하면 많은 수의 단순한, 미니멀한 Jekyll 테마는 다음과 같은 블로그 구조를 가지고 있기 때문이다.

![Minimal Jekyll theme Structure](img/Minimal%20Jekyll%20Structure.png)

만약 당신이 만들고 싶은 블로그의 구조가 더 깊고 다양하다면 테마에서 제공하는 구조를 활용해도 어려울 수 있다.

![Your Jekyll theme Structure](img/Your%20Blog%20Structure.png)

테마 안에서 스타일과 인터랙션을 수정하는 것 보다 테마의 구조를 변경하는 것이 더 난이도가 높으므로 처음 테마를 결정할 때 본인의 블로그 구조를 먼저 구상 해두는 것이 필요하다.

---

### Jekyll 테마 찾기


위 기준들을 잘 생각하면서 테마를 찾아보자. 다음과 같이 무료 Jekyll 테마를 모아서 리스트를 제공하는 사이트들이 있으니 원하는 테마를 찾아보도록 하자.

개인적으로는 [Github의 Jekyll-theme 토픽](https://github.com/topics/jekyll-theme) 이 가장 많은 테마를 제공하고 있고 정렬도 자유롭게 할 수 있지만, 리스트에서는 이름만 보이는 테마가 대부분이라 직접 들어가지 않는 한 어떤 테마인지 알 기 어렵다는 단점이 있다. [Jekyllthemes.io](http://jekyllthemes.io)는 start, last commit, fork 순으로 정렬할 수 있어 인기있는 테마를 빠르게 찾을 수 있다.

[https://jekyllthemes.io/free](https://jekyllthemes.io/free)

[https://github.com/topics/jekyll-theme](https://github.com/topics/jekyll-theme)

이외에도 다음과 같은 사이트들도 있다.

[https://jekyll-themes.com/free/](https://jekyll-themes.com/free/)

[http://themes.jekyllrc.org/](http://themes.jekyllrc.org/)

[http://jekyllthemes.org/](http://jekyllthemes.org/)

[https://jekyllthemes.dev/](https://jekyllthemes.dev/)

[https://drjekyllthemes.github.io/new](https://drjekyllthemes.github.io/new)

---

### Jekyll 설치

위에서 정했던 테마 선택 기준에서 내가 원했던 태그 기능, Table of Contents 기능을 제공하는 [Huxpro](https://github.com/Huxpro/huxpro.github.io) 테마를 이용해 블로그를 만들어보기로 했다. ~~중국어로 되어있긴 하지만, 코드는 영어겠지..~~

![Hupro Blog Demo](img/screenshot1.png)

Huxpro 테마로 만든 Hux Blog 페이지

#### 1. 설치 하고싶은 테마의 저장소[^1] 복사하기

설치려고 하는 테마를 정했다면, 해당 테마의 github 저장소에 들어가자.

![Fork](img/Fork.png)

![Fork at](img/Fork_at.png)

우측 상단에 있는 `Fork`[^2] 버튼을 클릭 하면, 복사하기를 원하는 저장소를 선택할 수 있을 것이다. 준비된 블로그용 저장소를 선택해 테마의 코드를 복사하자.

❗️ 다른 사람의 저장소를 Fork 하면 본인의 저장소에서도 기존 저장소의 정보들이 표시되게 되는데, 이것이 싫은 경우 저장소를 .zip으로 컴퓨터에 다운로드 받은 후 본인의 저장소에 내용물을 풀면 새로운 내용으로 인식하게 할 수 있다.

#### 2. 저장소 이름 변경

테마를 Fork하니 1편에서 설정했던 저장소 이름과 다르게 개별 저장소로 생성이 되었다. 1편에서 만들었던 저장소는 다른 이름으로 변경 혹은 삭제 후, 복사 해온 저장소의 이름을 변경해주자. 1편에서 한 설명과 같이, 저장소의 이름을 본인의 `username.github.io` 로 변경해야 한다. 각 저장소의 Settings 메뉴에 가면 기존 저장소를 삭제할 수 있고, 새로운 저장소 이름을 변경할 수 있다.

![Repo name change](img/repo_name_change.png)

저장소 이름을 변경했으니, 해당 주소로 들어가면 우리가 Fork 한 테마가 그대로 보이는 것을 확인할 수 있다!

#### 3. Github Desktop 에서 열기

자신의 깃헙 저장소에 테마 코드를 복사하고 저장소 이름도 내 username으로 변경도 완료했으니, 이를 불러오고 수정할 수 있도록 본인의 컴퓨터 로컬에 저장하고 편하게 수정할 수 있도록 Github Desktop에서 열도록 하자. 저장소를 Clone한 후 나의 경우엔 Fork 한 대상인 Huxpro에 contribute 할 것인지 나의 프로젝트로 사용할 것인지 물어보는데, 우리는 개인 블로그를 만들 것이기 때문에 아래 선택지인 개인 프로젝트 용으로 사용할 것으로 선택하자.

![Select for my own project](img/for_my_own_project.png)


#### 4. config.yml 수정하기

config.yml 파일은 테마의 가장 기본적인 설정들을 관리하는 파일이다. 보통 저장소의 가장 바깥에 있으니 찾기 쉬울 것이다. config 파일 내용은 테마마다 지원하는 기능, 구조가 달라 설정 가능한 항목들은 제각각이겠지만 나는 내가 복사한 Huxpro 테마의 설정들을 기준으로 설명해보겠다.

![change config file](img/change_config_file.png)

블로그 안에 내용과 관계 없이 블로그 사이트를 구성하는 가장 기초적인 세팅만 변경해보자.

1. `title` : 본인의 블로그의 제목을 입력
2. `SEOTitle` : 블로그 첫 페이지(Home)를 열었을 때 브라우저 탭에서 보일 문구
3. `header-img` : 블로그 첫 페이지(Home)에서 제공될 이미지. 지금은 변경하지 않고 유지하자
4. `email` : contact, 프로필 등에서 계속해서 제공 될 나의 contact 이메일 정보. 사용 여부에 따라 입력해두자.
5. `description` : 본인의 블로그를 나타내는 설명
6. `keyword` : 본인의 블로그에 담길 내용에 대한 키워드. 더 나은 검색에 사용되는듯 하다
7. `url` : 본인의 저장소 이름과 같이 `username.github.io` 로 변경해두자. 이후 CNAME 등록, URL 호스팅 등으로 주소도 커스터마이징 가능하다. 
8. `baseurl` : 블로그가 다른 도메인의 하위에 속한다면 지정하는 영역. 우리는 블로그 주소를 가장 상위 주소로 사용할것이기 때문에 이 영역은 건드리지 않고 남겨두자.

&gt; 이제 테마를 설치하고 기본적인 세팅까지 완료하였다. 여기까지는 스텝에 따라서 설치, 클릭 정도만 하면 되기 때문에 생각보다 어렵지 않았을 것이다. 역시 문제는 원하는 대로 스타일을 수정 하고, 꾸준히 블로그에 올릴 글을 쓰는 것이겠지.

다음 글에서는 내가 쓴 글에 사람들의 반응을 받을 수 있는 댓글 기능인 Disqus를 연결하는 방법을 알아보자.

---

#### Github.io로 나만의 블로그 만들기 시리즈

[(1) 가입 및 초기 세팅](https://tjrichard.github.io/blog/github-pages-series-1/)&lt;br&gt;
[(2) 원하는 Jekyll 테마 찾는 법, 설치하는 법](###)&lt;br&gt;
(3) ???

---

[^1]: Repository

[^2]: Fork는 해당 저장소에 있는 코드를 내 저장소에 복사 붙여넣기 하는 것이다.</description>
          <pubDate>Mon, 20 Jul 2020 23:40:45 +0900</pubDate>
          <link>http://localhost:4000/blog/github-pages-series-2/</link>
          <guid isPermaLink="true">http://localhost:4000/blog/github-pages-series-2/</guid>
        </item>
        
    
        
        <item>
          <title>Github Pages 가입 및 초기 세팅</title>
          <description>### Github.io, 혹은 Github Pages란

간략하게 설명하자면 Github.io, Github Pages는 Github에서 제공하는 블로그 서비스이다.


Github.io는 본인 Github 계정의 저장소를 바탕으로 정적(static) 호스팅을 제공해주는 Github Pages라는 서비스이다. 따로 웹 서버를 구축하거나 호스팅 서비스를 이용하지 않고서도 간단하게 웹페이지를 만들어 제공할 수 있다는 말이다.

티스토리 블로그도 글을 올리면서 Github Pages로 블로그를 따로 만들고 있는 이유는 코드레벨에서 블로그를 운영할 수 있고, 이후 내가 원하는대로 커스터마이징을 할 수 있다는 장점이 있기 때문이다.

티스토리, 브런치, 네이버 블로그와 같이 기존 플랫폼에서 블로그를 운영하면 제공하는 스킨, 에디터, 관리자 페이지를 활용할 수 있지만 플랫폼의 틀 안에서만 커스터마이징 가능한 반면,
Github Pages로 만든 블로그는 다양한 Jekyll 테마를 설치하고 내 입맛에 맞게 커스터마이징 할 수 있는 장점이 있다.

```
Jekyll: Github Pages는 블로그 구축을 위한 틀을 제공한다면, Jekyll은 블로그가 어떻게 보일지, 어떤 구조로 쌓아서 표현할지에 대한 틀을 제공하는 테마이다.
```

### 💎 이 글을 읽는 우리의 목표

나는 디자이너로 디자인 툴에서 이미지를 만들어 내는것을 넘어 원하는 디자인을 직접 구현해 보는데 관심이 있다. 반면 이 구현에 대한 관심은 취미 수준을 목표로 하기 때문에 모든 과정을 100% 나의 손으로 만들어 내는 것은 원하지 않는다.

따라서 이 글과 나의 목표는 적은 개발 공수를 들이면서도 마음에 드는 디자인을 직접 코드 레벨에서 뚝딱뚝딱 만들어 보는 것으로 잡으려고 한다.

1. 큰 노력 없이 간단하게 얻을 수 있는 결과
   ```
   괜찮은 테마를 가져와 Github Page를 통해 내 블로그를 웹에 띄워볼 수 있음
   ```
2. 큰 노력을 기울여 얻을 수 있는 멋진 결과
   ```
   괜찮은 테마를 가져와 이를 뜯어보고 내가 원하는 대로 구조, 스타일, 인터랙션을 커스터마이징 하고 서드파티 플러그인, 애널리틱스를 설치하고 방문자에 대한 분석까지 할 수 있음
   ```
우리의 목표에 맞는 아주 멋진 사례로 Jihye Lee 님의 블로그를 소개하겠다.
&gt; Jihye Lee 님은 Tale ([테마 데모](https://chesterhow.github.io/tale/), [테마 Git](https://github.com/chesterhow/tale)) 이라는 아주 심플하고 별거 없어 보이는 Jekyll 테마로 [본인의 블로그](http://jihyeleee.com/)를 아주 새롭고 멋지게 만든 예시가 있다.

나는 간단한 HTML, CSS 코딩 공부도 할 겸 직접 내 입맛에 맞는 블로그를 만들면서 실습까지 진행해보고자 시작하게 되었다.


### 1. Github.com 가입하기

Github.io는 Github.com에서 제공하는 블로그 서비스로, Github.io 페이지를 사용하기 위해서는 Github.com에 가입되어 있어야 한다.

[Github.com](http://github.com)으로 들어가서 가입을 해보자.

![github.com 메인 화면](img/screenshot1.png)

[Github.com](http://github.com) 메인 화면이다. 화면 중간 우측에 바로 가입할 수 있는 필드가 있다. 혹은 우측 상단의 Sign-up 을 눌러 Sign-up 페이지에서도 가입을 할 수 있다.

![Sign-up 페이지](img/screenshot2.png)

여기서 주의할 점은 **Username**이 이후 [Github.io](http://github.io) 에서 블로그 페이지를 만들 때 사용될 주소의 첫 부분을 담당한다는 점이다.
평소에 사용하던 읽을 수 없고 알아보기 힘든 `rhrnakaktxkd490000` 이나, 남들에게 보여주기 부끄러운 `cutie-jisu-94` 같은 아이디보단 만들고 싶은 블로그의 목적이나 본인을 잘 나타낼 수 있는 이름으로 만드는 것을 추천한다.


![가입 완료 후 설문조사](img/screenshot3.png)

가입을 완료하면 간단한 설문이 있는데, 대강 입력하고 다음으로 넘어가보자.

![이메일 인증 후 첫 온보딩 화면](img/screenshot4.png)


이후 이메일 인증을 완료하면 가장 먼저 어떤 것을 할 지 물어보는 페이지가 나온다. 우리는 Github.io 페이지의 저장소 역할을 할 Repository를 만들어야 한다. 가장 첫 번째에 있는Repository 만들기를 선택하자.

---

### 2. Repository 만들기

![Repository 만들기](img/screenshot5.png)

Repository를 만들기 위한 간단한 설정이다. Owner는 자동으로 가입한 계정으로 선택된 상태일 것이다.

**❗️여기서 Repository name을 정확하게 설정하는 것이 가장 중요하다.❗️**

```
Repository name을 &apos;Username.github.io&apos; 형태로 입력하자. 이 때 Username은 가입 시 입력한 사용자 이름이다.
```

위와 같이 정확하게 입력하지 않으면 이후 Github.io에서 페이지를 만들 때 이 Repository를 사용하지 못하기 때문에 **정.확.하.게** 입력해야 한다.


나머지 설정들은 당장 중요한게 아니니 적당히 입력하거나 무시하고 넘어가도록 하자.


![environments - github-pages](img/screenshot11.png)

위 형식대로 정확하게 입력 했다면 Github.com &gt; 해당 Repository에 들어가면 우측 하단 environments 영역에 github-pages가 표시되고 있는 것을 확인할 수 있을 것이다.

---

### 3. Git Client 연결해서 기초 작업 환경 세팅하기

자 이제 [Github.io](http://github.io)를 위한 계정과 저장소를 만들었다. Github.io 에서 다음 스텝을 따라가 보자.

[Github.io 페이지 ↗](https://pages.github.com/)

![User or organization site, Project site](img/screenshot6.png)

가장 먼저 `User or organization site` 와 `Project site` 옵션이 있다. Project site를 선택하면 다른 절차 없이 Jekyll 테마를 입힐 수 있지만, 기본적으로 제공하는 테마 자체가 구리디 구려서 선택할 테마가 단 하나도 없다. 약간 더 번거로운 절차가 있을지라도 원하는 테마를 찾아 입힐 수 있도록 User or organization site를 선택 해주자.

![Create Repository](img/screenshot7.png)

   **1. Create Repository**
   
   이 부분은 앞 단계에서 이미 완료했으니 넘어가자.
   
   **2. What git client are you using?**
   
   Git 클라이언트를 어떤 것으로 사용할 것인지 물어보는 선택지인데, 이 글을 보고 있는 사람들은 어짜피 터미널이나 CLI(Code Level Interface)로 깃을 사용하는 사람이 아니니, UI를 제공하는 `Github Desktop`을 선택하자.

   Github Desktop이 설치되어 있지 않은 사용자는 `I don&apos;t know`를 선택해 설치하고 다시 돌아오자.

   ![Clone repository](img/screenshot9.png)

   **3. Clone the repository**
   
   설치, 로그인 한 Github Desktop 에서 계정의 Repository를 본인의 컴퓨터에 복제해 관리할 수 있도록 한다. 나는 이미 세팅이 완료된 상태라 초기 화면은 아니지만 비슷한 설정 화면이 보일 것이다.

   혹은 Github.com에서 생성한 Repository에서 Clone &gt; Open with Github Desktop 버튼을 눌러 연동할 수 있다.

   ![Open with Github Desktop](img/screenshot10.png)


두 번째 Step에서 만든 Repository를 선택한 후, 본인의 컴퓨터에 보관 할 위치를 선택한다. 나는 icloud를 사용하고 있어 여러 컴퓨터에서 작업을 진행할 수 있도록 icloud에 복제해 두었다.

---

&gt; 여기까지 하면 테마 설정 이전 단계는 모두 끝난 것이라고 봐도 무방하다. Github.io 에서는 index.html 파일을 만들어 제대로 작동 하는지 확인하는 단계를 추가적으로 제공하고 있긴 한데, 이미 Repository를 만들 때 Readme.md를 생성했기 때문에 주소창에 {username}.github.io (나의 경우엔 `nam-d.github.io`)로 들어가면 Readme.md 내용이 보이는 것을 확인할 수 있다.

다음 게시글에서는 원하는 Jekyll 테마를 찾고 설치하는 과정에 대해 알아보도록 하자.

---

#### Github.io로 나만의 블로그 만들기 시리즈

[(1) 가입 및 초기 세팅](#)&lt;br&gt;
[(2) 원하는 Jekyll 테마 찾는 법, 설치하는 법](https://tjrichard.github.io/blog/github-pages-series-2/)&lt;br&gt;
(3) ???</description>
          <pubDate>Tue, 07 Jul 2020 23:40:45 +0900</pubDate>
          <link>http://localhost:4000/blog/github-pages-series-1/</link>
          <guid isPermaLink="true">http://localhost:4000/blog/github-pages-series-1/</guid>
        </item>
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    

    
      
        
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
        
          <item>
            <title>Seunghwan Jang</title>
            <description>AB180의 UX 디자이너 장승환의 블로그입니다.</description>
            <link>http://localhost:4000/about/</link>
          </item>
        
      
    
      
    
      
    

  </channel>
</rss>